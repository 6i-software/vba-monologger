var __index = {"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"An advanced and flexible logging solution in VBA","text":"<p>VBA Monologger is an advanced and flexible logging solution for VBA (Visual Basic for Applications) ecosystem. </p>"},{"location":"blog/index.html","title":"Blog","text":""},{"location":"blog/2024/11/15/vba-monologger-documentation-site-just-landed.html","title":"VBA Monologger documentation site just landed","text":"<p>Welcome! You're looking at the new website documentation, built with Material for Mkdocs, and deploy on GitHub Pages. Thanks to them for this wedding.</p> <p></p>"},{"location":"blog/2024/11/15/vba-monologger-documentation-site-just-landed.html#what-is-github-pages","title":"What is GitHub Pages?","text":"<p>GitHub Pages is a service provided by GitHub that allows you to host static websites directly from your GitHub repositories. It\u2019s particularly useful for developers, teams, and open-source projects, enabling them to create personal portfolios, project documentation, or organizational sites with minimal setup. The hosted websites are directly tied to the content of a repository, which means that updates to the repository automatically update the site.</p> <p>For more information, visit the GitHub Pages documentation.</p>"},{"location":"blog/2024/11/15/vba-monologger-documentation-site-just-landed.html#what-is-mkdocs-and-material-for-mkdocs","title":"What is MkDocs and Material for MkDocs?","text":"<p>MkDocs is an open-source static site generator specifically designed for creating documentation websites. Written in Python, it offers a clean, developer-friendly experience for building sites quickly. Its focus on simplicity makes it a popular choice for technical documentation.</p> <p>Material for MkDocs is a theme for MkDocs that enhances its capabilities with a modern and professional look. Inspired by Google\u2019s Material Design principles, this theme provides a sleek, responsive design and a wealth of customization options, making your documentation more engaging and accessible.</p> <p>Together, they create a powerful framework for writing and publishing technical documentation easily and efficiently. For more information, visit the Material for MkDocs documentation.</p>"},{"location":"blog/2024/11/15/vba-monologger-documentation-site-just-landed.html#curious-to-see-and-understand-how-this-site-is-built","title":"Curious to see and understand how this site is built?","text":"<p>For those curious about how the VBA Monologger documentation site is constructed (in JAMStack we should say generated), the key lies in the structure of the <code>/docs</code> directory within the Git repository. This folder contains all the Markdown files that make up the content of the site, as well as other resources like images or custom scripts.</p> <p>And the crucial piece of the puzzle is the <code>mkdocs.yml</code> configuration file located at the root of the repository. This file acts as the blueprint for the site, defining how pages are organized, specifying themes, and enabling features like search functionality or plugins.</p> <p>Happy exploring, and have fun customizing your own documentation projects!</p>"},{"location":"blog/2024/11/16/how-to-create-a-log-file-in-vba.html","title":"How to create a log file in VBA?","text":"<p>In the realm of computing, a log file serves as a record keeper for events that transpire within an operating system or during the execution of software applications. These logs can also store communications between different users of particular software. The act of recording this information is referred to as logging. Typically, messages and events are documented in a single log file.</p>"},{"location":"blog/2024/11/16/how-to-create-a-log-file-in-vba.html#creating-a-logger-file-with-vba-monologger","title":"Creating a logger file with VBA Monologger","text":"<p>To set this up with VBA Monologger, you can use its factory with the method <code>VBAMonologger.Factory.createLoggerFile()</code>, which creates a specialized logger for file. By default, this logger writes logs to the <code>./var/log/logfile_yyyy-mm-dd.log</code> file, relative to the path of the workbook (yyyy-mm-dd = date of the day). But if you want, you can change the name and the folder of the file.</p> <pre><code>Public Function createLoggerFile( _\n    Optional ByVal paramLoggerName As String = vbNullString, _\n    Optional ByRef paramFormatter As FormatterInterface = Nothing, _\n    Optional ByVal paramLogFileName As String = vbNullString, _\n    Optional ByVal paramLogFileFolder As String = vbNullString _\n) As VBAMonologger.Logger\n</code></pre> <p>To ensure compatibility with special and multilingual characters, the UTF-8 encoding is preferred.</p> <p>This logger utilizes the <code>VBAMonologger.HandlerFile</code> handler. For more details about this handler, check the documentation here: Handler Console.</p>"},{"location":"blog/2024/11/16/how-to-create-a-log-file-in-vba.html#example-code","title":"Example Code","text":"<p>Here's an example of how to implement this:</p> <pre><code>Public Sub howto_use_logger_file()\n    ' Initialize the Logger for ouput logs into file\n    Dim Logger As VBAMonologger.LoggerInterface\n    Set Logger = VBAMonologger.Factory.createLoggerFile( _ \n        paramLoggerName:= \"App\", _\n        paramLogFileName:=\"my-log-file___\"&amp;format(Now, \"yyyy-mm-dd\") &amp; \".log\", _\n        paramLogFileFolder:=ThisWorkbook.Path &amp; \"\\logs\" _        \n    )    \n\n    ' Use the logger for each severity levels\n    Logger.trace \"Authentication function call for user 'Bob Morane'.\" \n    Logger.info \"User 'UltraVomit' has logged in successfully.\"\n    Logger.notice \"Process completed successfully with minor issues.\"\n    Logger.warning \"'Beetlejuice' should not be called more than 3 times.\"\n    Logger.error \"An error occurred with the user 'DRZCFOS2'.\"\n    Logger.critical \"System is in an unstable state.\"\n    Logger.alert \"Action required: unable to generate the dashboard.\"\n    Logger.emergency \"A critical failure occurred in the application.\"\nEnd Sub\n</code></pre> <p>So when you run this code, it creates the file into output folder and it writes logs messages into it.</p> <p></p> <p>Happy logging ^^.</p>"},{"location":"blog/2025/01/10/how-to-send-vba-logs-to-the-windows-console-.html","title":"How to send VBA logs to the Windows console ?","text":"<p>While there are many ways to handle logging, sending logs directly to the Windows Console can be particularly useful during development and debugging. This article will guide you through the steps to log messages from VBA to the Windows Console.</p> <p></p>"},{"location":"blog/2025/01/10/how-to-send-vba-logs-to-the-windows-console-.html#creating-a-logger-for-the-windows-console","title":"Creating a Logger for the Windows console","text":"<p>To set this up with VBA Monologger, you can use its factory with the method <code>VBAMonologger.Factory.createLoggerConsole()</code>, which creates a specialized logger for the Windows Console, that supports ANSI colors.</p>"},{"location":"blog/2025/01/10/how-to-send-vba-logs-to-the-windows-console-.html#how-it-works","title":"How it works?","text":"<p>This logger handles log messages by streaming them to the console through an HTTP-based client/server architecture. </p> <ul> <li>Client-Side: The VBA client sends log records as HTTP requests to the server.</li> <li>Server-Side: The server, known as the \"VBAMonologger HTTP server logs viewer\" and written in Powershell, processes these requests and displays the log messages directly in the console output.</li> </ul> <p>This logger utilizes the <code>VBAMonologger.HandlerConsole</code> handler. For more details about this handler, check the documentation here: Handler Console.</p>"},{"location":"blog/2025/01/10/how-to-send-vba-logs-to-the-windows-console-.html#example-code","title":"Example Code","text":"<p>Here's an example of how to implement this:</p> <pre><code>Public Sub howto_use_logger_console()\n    ' Initialize the Logger for windows console\n    Dim Logger As VBAMonologger.LoggerInterface\n    Set Logger = VBAMonologger.Factory.createLoggerConsole(\"App\")\n\n    ' Use the logger for each severity levels\n    Logger.trace \"Authentication function call for user 'Bob Morane'.\" \n    Logger.info \"User 'UltraVomit' has logged in successfully.\"\n    Logger.notice \"Process completed successfully with minor issues.\"\n    Logger.warning \"'Beetlejuice' should not be called more than 3 times.\"\n    Logger.error \"An error occurred with the user 'DRZCFOS2'.\"\n    Logger.critical \"System is in an unstable state.\"\n    Logger.alert \"Action required: unable to generate the dashboard.\"\n    Logger.emergency \"A critical failure occurred in the application.\"\nEnd Sub\n</code></pre> <p>When you run this code, it launches a cmd.exe window, where you can view the log entries.</p>"},{"location":"blog/2025/01/10/how-to-send-vba-logs-to-the-windows-console-.html#customize-the-logger-windows-console","title":"Customize the logger windows console","text":"<p>As you can see, in the signature of this factory's method, it is also possible to set the name the logger, to load a custom formatter, and more. </p> <pre><code>Public Function createLoggerConsole( _\n    Optional ByVal paramLoggerName As String = vbNullString, _\n    Optional ByRef paramFormatter As FormatterInterface = Nothing, _\n    Optional ByRef paramWithANSIColorSupport As Boolean = True, _\n    Optional ByRef paramWithNewlineForContextAndExtra As Boolean = True, _\n    Optional ByRef paramWithDebugServer As Boolean = False, _\n    Optional ByRef paramWithDebugClient As Boolean = False _\n) As VBAMonologger.Logger\n</code></pre>"},{"location":"blog/2025/01/10/how-to-send-vba-logs-to-the-windows-console-.html#disable-support-ansi-color","title":"Disable support ANSI color","text":"<pre><code>Public Sub howto_use_logger_windows_console()\n    Dim Logger As VBAMonologger.LoggerInterface\n    Set Logger = VBAMonologger.Factory.createLoggerConsole( _\n        paramLoggerName:=\"MyLogger\", _\n        paramWithANSIColorSupport:=False _\n    )\n\n    ' Use the logger for each severity levels\n    Logger.trace \"Authentication function call for user 'Bob Morane'.\"\n    (...)\n    Logger.emergency \"A critical failure occurred in the application.\"\nEnd Sub\n</code></pre>"},{"location":"blog/2025/01/10/how-to-send-vba-logs-to-the-windows-console-.html#enable-the-debug-mode-for-client-and-server","title":"Enable the debug mode for client and server","text":"<p>To enable debug mode for both the client and server when setting up your logger in VBA, just set the <code>paramWithDebugServer</code> and <code>paramWithDebugClient</code> parameters to True. This allows you to trace and debug operations more precisely, as log messages from both the client and server will be captured and displayed.</p> <pre><code>Public Sub howto_use_logger_windows_console()\n    Dim Logger As VBAMonologger.LoggerInterface\n    Set Logger = VBAMonologger.Factory.createLoggerConsole( _\n        paramLoggerName:=\"MyLogger\", _\n        paramWithDebugServer:=True, _\n        paramWithDebugClient:=True _\n    )\n\n    ' Use the logger\n    Logger.trace \"Authentication function call for user 'Bob Morane'.\"\nEnd Sub\n</code></pre> <p>When the logger is created, it launches the server into a console windows by using a special component, named <code>ConsoleWrapper</code>. It ensures that multiple cmd.exe windows are not opened if one is already running. </p> <p>The HTTP server is launched, and it listens on port <code>20100</code> by default, but you can configure the server to use a different IP address and port number if needed. When the server is listening, it awaits incoming client connections. Each time the logger is used to send a log (e.g., <code>Logger.trace</code>), it initiates a simple HTTP request that's processed and displayed by the server. The server then sends a response back to the VBA client, confirming that the message was successfully processed.</p> <p></p>"},{"location":"getting-started/index.html","title":"Getting started","text":""},{"location":"getting-started/install.html","title":"Install","text":""},{"location":"getting-started/install.html#manual-installation","title":"Manual installation","text":"<ol> <li> <p>Download the VBA Monologger Excel Add-in (.xlam file) to your computer.</p> <p>6i_VBA-Monologger.xlam Hash SHA1: 46E0FF01DE2A81254375BCF0B5C9BB97C4E53E35</p> </li> <li> <p>Put this xlam file into a folder trusted by Excel. Microsoft requires that the xlam file's location be set as a Trusted Location for the add-in to function properly. To set this up, go to: File &gt; Options &gt; Trust Center &gt; Trust Center Settings &gt; Trusted Locations &gt; Add New Location.</p> </li> <li> <p>Make sur the Developper tab is visible in Excel. By default, the Developer Ribbon is hidden; to enable it, go to File &gt; Options &gt; Customize Ribbon, then check the Developer box under the Main Tabs section and validate it.     </p> </li> <li> <p>And finally, add the .xlam file as a reference in your VBA project through Tools &gt; References in the VBA editor.      </p> </li> </ol> <p>That's it.</p>"},{"location":"getting-started/install.html#setup-wizard-installation-not-yet-available","title":"Setup wizard installation (not yet available)","text":"<p>In the future, we plan to introduce a setup wizard to simplify the deployment of VBA add-ins using InnoSetup. </p> <p>This setup will place the VBA Monologger <code>.xlam</code> file into the standard folder for Excel add-ins: <code>C:\\Users\\[name]\\AppData\\Roaming\\Microsoft\\AddIns\\</code>. And after, it will automatically activate in Excel by updating the Windows Registry.</p> <p>See : https://github.com/6i-software/deploy-microsoft-office-extensions </p>"},{"location":"getting-started/introduction.html","title":"Introduction","text":""},{"location":"getting-started/introduction.html#preamble","title":"Preamble","text":""},{"location":"getting-started/introduction.html#a-logging-system","title":"A logging system","text":"<p>Logging is a process that involves recording and storing traces of events, activities, or errors that occur during the use of an application. Useful for both developers for debugging and administrators for diagnosing and resolving incidents, logs provide traceability and visibility into the behavior of an application throughout its operation.</p> <p>In its simplest form, log entries are recorded in text format, with each line representing an event that occurred during the application's lifecycle.</p> <pre><code>[2024-11-05 09:15:34] app.INFO: Application started\n[2024-11-05 09:16:01] app.INFO: Workbook loaded successfully\n[2024-11-05 09:17:15] app.DEBUG: Task modified\n[2024-11-05 09:18:45] app.WARNING: Low disk space - risky save\n[2024-11-05 09:19:03] app.ERROR: Project save failed\n[2024-11-05 09:20:00] app.INFO: Application closed\n</code></pre> <p>According to the twelve-factor app manifest, you should \"treat logs as event streams\". Logs are not just recorded in a file for later consultation. They can also be monitored in real-time in a terminal, sent to a database, or redirected to external log aggregation and analysis tools (such as the ELK stack, Graylog, BetterStack, Splunk...).</p> <p>A logging system should offer flexible management, allowing different severity levels of events to be distinguished, so messages can be filtered according to their importance, from simple information to critical errors. It should also be capable of sending logs to multiple destinations simultaneously, such as a terminal, file, database, or monitoring service. Additionally, the log format must be customizable to meet the specific needs of the application and the tools used for analysis, making it easier to manage and interpret the collected data.</p>"},{"location":"getting-started/introduction.html#motivations","title":"Motivations","text":"<p>VBA provides developers with the ability to automate tasks, interact with the features of Microsoft Office applications, and even create applications with a graphical user interface (<code>Userform</code>). However, compared to other development ecosystems, VBA only offers a rudimentary logging solution, limited to the <code>Debug.Print</code> function, which writes to the Excel console (a.k.a. the Excel immediate window).</p> <p>The VBA Monologger library project was born out of the need for a more advanced and flexible logging solution in the VBA ecosystem. It is (heavily) inspired by the PSR-3 standard in the PHP ecosystem and its most recognized implementation, the Monolog library, which itself is inspired by the Logbook library in Python.</p> <p>The goal of this library is to provide similar features and capabilities, particularly by offering a modular architecture that can easily adapt to different use cases. </p>"},{"location":"getting-started/introduction.html#what-is-vba-monologger","title":"What is VBA Monologger?","text":"<p>VBA Monologger is an advanced and flexible logging solution for VBA (Visual Basic for Applications) ecosystem.</p> <p>Main features:</p> <ul> <li>Customize the logging format to define how log messages are structured and displayed.</li> <li>Specify the destination where logs should be viewed (e.g., VBA console a.k.a Excel's immediate window, Windows console (cmd.exe) with ANSI color support, file...) and configure the conditions under which logging events are triggered based on specific criteria.</li> <li>Manages 8 standard severity levels to classify the importance of log messages, following the PSR-3 standard.</li> <li>Enrich log records with pre-processors, enabling the addition of context, transformation of data, or customization of log entries to suit specific needs (e.g. add CPU or memory usage, generate a UID for each session, add tags... and more).</li> <li>Use the provided loggers in the library (e.g. <code>LoggerConsoleVBA</code>, <code>LoggerConsole</code> or <code>LoggerFile</code>) for basic usage, or create your own custom logging system.</li> <li>Easily develop your own custom formatter, handler, and pre-processors to tailor the logging system to your specific needs. By creating unique formatting styles, specialized handlers, and custom pre-processing logic, you can enhance the functionality and flexibility of your logging setup, ensuring it meets the precise requirements of your applications and workflows.</li> </ul>"},{"location":"getting-started/introduction.html#concepts","title":"Concepts","text":""},{"location":"getting-started/introduction.html#severity-log-level","title":"Severity log level","text":"<p>It indicates the severity of each event, from the most trivial to the most catastrophic, and allow administrators or developers to filter messages based on their importance.</p> <p>VBA Monologger manages 8 standard severity levels to classify the importance of log messages, following the PSR-3 standard, which is itself based on RFC-5424, the standard defined by the IETF (Internet Engineering Task Force) to specify the format of messages for the Syslog protocol, which is used for transmitting logs over IP networks.</p> Log level Description <code>EMERGENCY</code> Indicates a very critical situation that requires immediate attention. (system crash, data corruption) <code>ALERT</code> Signals an alert condition. (critical disk space running out) <code>CRITICAL</code> Indicates a serious error. (database connection failure, server downtime) <code>ERROR</code> Represents an error in the system. (failed to save user data, unexpected exception) <code>WARNING</code> A warning about a potential problem. (use a deprecated function used, low memory warning) <code>NOTICE</code> Important notifications that are not urgent. (user login successful, configuration change detected) <code>INFO</code> General information about the normal operation. (system startup, data processed successfully) <code>TRACE</code> Detailed information for debugging. (variable values during loop iteration, execution details). Notes, that the 'debug' method exposes presents in PSR-3 is rename into 'trace' in order to be compatible in VBA ecosystem."},{"location":"getting-started/introduction.html#logger","title":"Logger","text":"<p>The logger is the central component of this library, acting as the primary interface for recording, categorizing, and managing log messages throughout an application. It provides developers with a highly configurable and flexible tool for implementing custom logging logic tailored to their specific needs. By using a logger, applications can systematically capture events and system states, facilitating both real-time monitoring and historical analysis of system behavior.</p> <p>The logger is designed to handle multiple logging levels, directing each log entry to the appropriate handlers (i.e. appropriate destinations) and applying the correct formatting to messages. It also supports the use of various pre-processors, which can enrich log messages with extra contextual information, allowing for complex logging logic while keeping code readable and straightforward.</p> <pre><code>mindmap\n  root((Logger))\n    node1(Handlers)\n      HandlerConsoleVBA&lt;br&gt;*for all levels*\n        FormatterLine\n      HandlerConsole&lt;br&gt;*for all levels*\n        FormatterANSIColoredLine\n      HandlerFile&lt;br&gt;*exclude debug level*\n        FormatterJSON\n      HandlerEmail&lt;br&gt;*for level greater than error*\n        FormatterHTML\n    node2(Processors)\n      ProcessorPlaceholders\n      ProcessorUID\n    node3(Name of loger, a.k.a. log channel)</code></pre> <p>Additionally, the logger standardizes and simplifies the use of logging methods (such as methods: <code>logger.trace</code>, <code>logger.info</code>, ...). It offers a consistent and intuitive approach to logging at different levels of severity, letting developers effortlessly call the appropriate logging level without dealing with the underlying technical details. Each log level can be invoked through a simple, clear method, making logging an integral yet unobtrusive part of the development process. </p> <p>Every logger implements the <code>LoggerInterface</code>, which provides the following methods:</p> <pre><code>Logger.emergency \"A critical failure occurred in the application.\"\nLogger.alert \"Action required: unable to generate the dashboard.\"\nLogger.critical \"System is in an unstable state.\"\nLogger.error \"An error occurred with the user 'DRZCFOS2'.\"\nLogger.warning \"'Beetlejuice' should not be called more than 3 times.\"\nLogger.notice \"Process completed successfully with minor issues.\"\nLogger.info \"User 'UltraVomit' has logged in successfully.\"\nLogger.trace \"Authentication function call for user 'Bob Morane'.\" \n</code></pre>"},{"location":"getting-started/introduction.html#identifying-a-logger-with-a-channel","title":"Identifying a logger with a channel","text":"<p>A channel is a powerful way to identify which part of an application a log entry is associated with. This is especially useful in large applications with multiple components and multiple loggers. The idea is to have several logging systems sharing the same handler, all writing into a single log file. Channels help identify the source of the log, making filtering and searching more manageable.</p> <p>Here\u2019s an example with three distinct logging channels to demonstrate how they help differentiate logs by application component: one channel for the main application (<code>app</code>), another for authentication (<code>auth</code>), and a third for data processing (<code>data</code>).</p> Logging system with multiples loggers identified by channels<pre><code>[2024-11-05 09:15:34] auth.INFO: User login successful\n[2024-11-05 09:16:01] app.INFO: Dashboard loaded successfully\n[2024-11-05 09:16:20] data.DEBUG: Data import started\n[2024-11-05 09:17:30] auth.WARNING: Suspicious login attempt detected\n[2024-11-05 09:18:45] data.ERROR: Data import failed\n[2024-11-05 09:19:03] app.INFO: User preferences saved\n[2024-11-05 09:20:00] app.INFO: Application shutdown initiated\n</code></pre>"},{"location":"getting-started/introduction.html#processing-log-records-with-a-handler","title":"Processing log records with a handler","text":"<p>A log handler is a key component responsible for processing each log entry. When a log message is generated, it is not simply recorded; it must be directed to a location where it can be viewed and used. This is where the handler comes in, determining where and how each log entry will be sent or saved. </p> <p>Here are some examples of built-in log handlers provided in VBAMonologger:</p> Handler Description <code>HandlerConsoleVBA</code> Sends log messages to the console of VBA Project IDE (Excel's Immediate Window). <code>HandlerConsole</code> Sends log messages to the Windows console (cmd.exe). <code>HandlerFile</code> Write log messages into a text file. <code>HandlerEmail</code> Sends messages by email, typically used to alert an administrator in case of critical errors. (not yet available) <p>The benefit of using different handlers lies not only in applying specific treatments to logs but also in filtering messages based on their severity level. A handler can be configured to handle only certain severity levels. For example, one handler could be set to log only critical errors to a dedicated file, while another handler records all events in a general log file.</p>"},{"location":"getting-started/introduction.html#formatting-log-records-the-serialization-of-logs-record","title":"Formatting log records, the serialization of logs record","text":"<p>Each handler is associated with a unique formatter, a specialized component responsible for defining the structure and presentation of log messages. The formatter processes and organizes each log entry, converting it from its raw form to a readable format tailored to a specific type (text, HTML, JSON, etc.). This process can be seen as similar to the serialization of a log record.</p> <p>VBA Monologger provides the following formatters:</p> Log Formatter Description <code>FormatterLine</code> The default formatter that represents each log entry on a single line of text. <code>FormatterANSIColoredLine</code> A version derived from FormatterLine that supports color coding each log entry line using ANSI escape sequences. <code>FormatterJSON</code> Formats the logs in JSON. This is the most interoperable format, facilitating integration with external log aggregation and analysis tools (e.g., ELK stack). <code>FormatterHTML</code> Produces messages in HTML format, typically used when sending logs via email. (not yet available)"},{"location":"getting-started/introduction.html#redirection-and-chaining-handlers-stack-handlers","title":"Redirection and chaining handlers (stack handlers)","text":"<p>In the log processing, there's no limitation to having multiple handlers into logger, so that the same log entry can be sent to multiple destinations in the same time with different formatter: console, writing to a file, or sending via email. Each handler acts sequentially, one after the other, in the order they were added to the logger's stack. </p> <p>When a log event occurs, it passes through all handlers, each performing its own processing.</p> <p>This mechanism provides great flexibility in log processing because each handler can be independently configured to perform specific actions without interfering with the others.</p>"},{"location":"getting-started/introduction.html#propagation-control-of-logs-bubbling","title":"Propagation control of logs (bubbling)","text":"<p>When multiple handlers are referenced in a logger, each handler can choose either to block the propagation of a log message (a.k.a. bubbling) within the processing chain or to allow it to continue to other handlers in the stack. The control of this propagation is managed by setting the <code>bubble</code> boolean property attached to each handler. </p> <p>When a handler blocks propagation (i.e. <code>bubble = false</code>), it means the log message will not be passed to the handlers below it in the stack. Otherwise, the message will continue to propagate until every handler in the stack has had a chance to process it.</p> <p>Let's imagine a logging system with three handlers:</p> <ul> <li>First, a <code>HandlerEmail</code> to send error-level logs (<code>level &gt;= ERROR</code>) via email, without propagation (<code>bubble = false</code>).</li> <li>Next, a <code>HandlerFile</code> to log other messages in a file, excluding the trace level (<code>TRACE &lt; level &lt; ERROR</code>).</li> <li>And finally, a <code>HandlerConsole</code> to display the remaining logs in the console (<code>level &lt; ERROR</code>).</li> </ul> <p>With this custom logging system, when an error-level log is captured by <code>HandlerEmail</code>, the first handler in the stack, it will not propagate to the other handlers. An <code>ERROR</code> level log will only be sent via email. It will not be recorded in the log file (<code>HandlerFile</code>), nor displayed in the console (<code>HandlerConsole</code>).</p> <pre><code>sequenceDiagram\n    participant Logger as Logger\n    participant HandlerEmail as HandlerEmail&lt;br&gt;($bubble = false, level = ERROR)\n    participant HandlerFile as HandlerFile&lt;br&gt;(level = NOTICE)\n    participant HandlerConsole as HandlerConsole&lt;br&gt;(level = DEBUG)\n\n    %% ERROR level log\n    Logger-&gt;&gt;HandlerEmail: ERROR level log\n    HandlerEmail--&gt;&gt;HandlerEmail: Send log via email\n    HandlerEmail--xHandlerFile: Propagation blocked&lt;br&gt;($bubble = false)\n    Note right of HandlerEmail: The error message is handled &lt;br&gt;only by HandlerEmail &lt;br&gt;and is not processed elsewhere.</code></pre> <p>And when a log of level <code>INFO</code> is recorded, it is not captured by the first <code>HandlerEmail</code>. Its processing starts with the <code>HandlerFile</code>, which allows the propagation of the messages. The log is then sent to the <code>HandlerConsole</code> for processing. Therefore, this log will be recorded in a log file and displayed in the console.</p> <pre><code>sequenceDiagram\n    participant Logger as Logger\n    participant HandlerEmail as HandlerEmail&lt;br&gt;($bubble = false, level = ERROR)\n    participant HandlerFile as HandlerFile&lt;br&gt;(level = NOTICE)\n    participant HandlerConsole as HandlerConsole&lt;br&gt;(level = DEBUG)\n\n    %% INFO level log\n    Logger-&gt;&gt;HandlerEmail: INFO level log\n    HandlerEmail--xHandlerEmail: Ignored (insufficient level)\n    HandlerEmail-&gt;&gt;HandlerFile: INFO level log\n    HandlerFile--&gt;&gt;HandlerFile: Log saved to file\n    HandlerFile--&gt;&gt;HandlerConsole: Propagation (bubble = true)\n    HandlerConsole--&gt;&gt;HandlerConsole: Displayed in console\n    Note right of HandlerFile: INFO level log is processed&lt;br&gt;by HandlerFile and HandlerConsole.</code></pre>"},{"location":"getting-started/introduction.html#adding-metadatas-in-log-records","title":"Adding metadatas in log records","text":"<p>In addition to the basic log message, you may sometimes want to include extra information that helps to provide more context for the event being logged. This could include things like the username of the person triggering the event, a session ID, or any other piece of data that can assist in understanding the log entry better. </p> <p>VBA Monologger offers two options for adding complementary data to a log record: <code>context</code> and <code>extra</code>.</p> <ul> <li>The <code>context</code> is used to add information directly related to the logged event, such as details about an error or an ongoing operation.</li> <li>Meanwhile, <code>extra</code> is reserved for additional metadata, often generated automatically or added by pre-processors, providing a global context.</li> </ul> <p>Whether it's the <code>context</code> option or the <code>extra</code> option, they are essentially VBA dictionaries, where you can store key-value pairs that hold relevant information. When you create a log entry, this context can be attached and will be incorporated into the log output, providing deeper insights into the logged event. This feature is a great way to enrich your log entries with important details and provide better traceability and understanding of your application's behavior.</p> Using placeholders with data context<pre><code>' Set context \nDim context As Object: Set context = CreateObject(\"Scripting.Dictionary\")\ncontext.Add \"Username\", \"v20100v\"\n\n' Set extra \nDim extra As Object: Set extra = CreateObject(\"Scripting.Dictionary\")\nextra.Add \"CPU-Usage\", \"51%\"\n\nLogger.info \"Adding a new user\", context\nLogger.info \"Adding the new user: '{username}'\", context\nLogger.info \"Adding the new user: '{username}'\", context, extra\n</code></pre> Result<pre><code>[2024-11-05 09:15:34] app.INFO: Adding a new user | {\"Username\": \"v20100v\"}\n[2024-11-05 09:15:34] app.INFO: Adding the new user: 'v20100v' | {\"Username\": \"v20100v\"}\n[2024-11-05 09:15:34] app.INFO: Adding the new user: 'v20100v' | {\"Username\": \"v20100v\"} | extra: {\"CPU-Usage\":\"51%\"}\n</code></pre>"},{"location":"getting-started/introduction.html#template-engine-with-placeholders","title":"Template engine with placeholders","text":"<p>Regardless of which log handler is used and which formatter is applied, the fields within the <code>context</code> can be accessed as template variables within the log message. It is not possible to use the data present in <code>extra</code>; only the data in <code>context</code> is utilized by the template engine.</p> <p>This templating engine is provided by the pre-processor <code>ProcessorPlaceholders</code>, which uses <code>context</code> data to replace variables in log messages. It allows to embed context values directly into log message text with placeholders. All template variables are enclosed in <code>{}</code> brackets. </p> <p>Notes, if a particular key doesn\u2019t exist in the context, it will be replaced by an empty string.</p> <p>In the example above, the engine automatically replaces the placeholder <code>{username}</code> with its corresponding value from the context dictionary, in this case, <code>v20100v</code>.</p>"},{"location":"getting-started/introduction.html#pre-processor-of-log-records","title":"Pre-processor of log records","text":"<p>Pre-processors are a powerful feature, allowing for additional metadatas to be added to log messages before they are recorded. These functions can be used to enrich log messages with extra information that might not be directly part of the log entry itself, but is still relevant for better understanding and tracking. Pre-processors can modify, format, or even generate additional metadata that can be attached to each log message into the <code>extra</code> property. A logger can reference one or more pre-processors.</p> <p>In VBA Monologger, several built-in processors offer specific functionalities to enhance the log entry by adding additional context or modifying it in various ways before it is passed to the handlers. Here are some examples of the available pre-processors:</p> Log processor Description <code>ProcessorPlaceholders</code> Allows to replace specific variables or placeholders in log messages with their corresponding values, adding dynamic context to the logs. The <code>context</code> variable must be a VBA <code>Scripting.Dictionary</code>. (e.g. <code>logger.info(\"Authentication failed for user '{UserName}' with id '{UserID}'.\", context)</code>. <code>ProcessorTags</code> Adds one or more tags to a log entry. <code>ProcessorUID</code> Adds a unique identifier (UID) to each session . The generated UID consists of hexadecimal characters, and its size can be configured. <code>ProcessorUsageMemory</code> Adds the computer's memory usage to each log entry. The system's current memory status is retrieved using the <code>GlobalMemoryStatusEx</code> API in Windows. <code>ProcessorUsageCPU</code> Adds the computer's cpu usage to each log entry. <p>Result of a logger with pre-processors : placeholders, tags (<code>environment, user_role</code>), UID, usage memory and usage CPU.</p> <pre><code>[2024/12/13 18:59:30] App.INFO: User '35353' has logged in successfully.\n | context: \n | {\n |    \"UserName\": \"Bob\",\n |    \"UserID\": 35353,\n |    \"Operation\": \"create\",\n |    \"environment\": \"production\",\n |    \"user_role\": \"admin\"\n | }\n | extra: \n | {\n |    \"session-UID\": \"A09A248CF0\",\n |    \"memory\": {\n |       \"memory-used\": \"65%\",\n |       \"memory-total\": \"15,23\",\n |       \"memory-available\": \"5,30\"\n |    },\n |    \"CPU-used\": \"21,5%\"\n | }\n</code></pre>"},{"location":"getting-started/quick-start.html","title":"Quick start","text":""},{"location":"getting-started/quick-start.html#log-output-to-vba-console","title":"Log output to VBA console","text":"<p>In VBA Monologger, we use a factory in order to simplify and standardize the creation of objects, such as loggers, by encapsulating the logic needed to initialize them. The factory pattern abstracts the object creation process, which can be particularly useful. </p> <p>So to instantiate your first logger that output logs into the VBA console, just use the method <code>VBAMonologger.Factory.createLoggerConsoleVBA()</code>, as shown below. </p> <pre><code>Public Sub howto_use_logger_console_VBA()\n    Dim Logger As VBAMonologger.LoggerInterface\n    Set Logger = VBAMonologger.Factory.createLoggerConsoleVBA()\n\n    ' Use the logger for each severity levels\n    Logger.trace \"Authentication function call for user 'Bob Morane'.\" \n    Logger.info \"User 'UltraVomit' has logged in successfully.\"\n    Logger.notice \"Process completed successfully with minor issues.\"\n    Logger.warning \"'Beetlejuice' should not be called more than 3 times.\"\n    Logger.error \"An error occurred with the user 'DRZCFOS2'.\"\n    Logger.critical \"System is in an unstable state.\"\n    Logger.alert \"Action required: unable to generate the dashboard.\"\n    Logger.emergency \"A critical failure occurred in the application.\"\nEnd Sub\n</code></pre> <p>You can see result in the VBA console (a.k.a. Excel's Immediate Windows).</p> <p></p> <p>Note: If the console is not visible in Excel Visual basic IDE, go to the menu and select View &gt; Immediate Window. Alternatively, you can press Ctrl + G to quickly open it.</p> <p>This logger, provided by the factory's method <code>createLoggerConsoleVBA</code>, is configured by default: </p> <ul> <li>with the handler <code>VBAMonologger.Handler.HandlerConsoleVBA</code>, which uses the default line formatter: <code>VBAMonologger.Formatter.FormatterLine</code>.</li> <li>with the pre-processors placeholders: <code>VBAMonologger.Processor.ProcessorPlaceholders</code>, allowing the use of placeholders in log messages that will be replaced with values provided in the log record context.</li> <li>and without a channel name. </li> </ul> <p>As you can see, in the signature of this factory's method, it is possible to set the name the logger (channel) and to load a custom formatter.</p> VBAMonologger.Factroy.createLoggerConsoleVBA()<pre><code>Public Function createLoggerConsoleVBA( _\n    Optional ByVal paramLoggerName As String = vbNullString, _\n    Optional ByRef paramFormatter As FormatterInterface = Nothing _\n) As VBAMonologger.Logger\n</code></pre>"},{"location":"getting-started/quick-start.html#log-output-to-windows-console","title":"Log output to Windows console","text":"<p>If you prefer to display your logs outside the Excel VBA IDE, you can output them directly to the Windows Console (cmd.exe). This approach is particularly useful when working on complex applications where monitoring logs in real-time is crucial, or when you need a larger with colors support via ANSI sequence, dedicated interface for debugging. </p> <p>The factory can create a dedicated logger for Windows Console with <code>VBAMonologger.Factory.createLoggerConsole()</code> method. It handles log messages by streaming them to the Windows console using an HTTP-based client/server architecture. The client sends log records as HTTP requests to the server, and the server processes these requests, displaying the log messages directly in the console output. This logger features a formatter that supports ANSI colors <code>VBAMonologger.Formatter.FormatterANSIcoloredLine</code>.</p> <pre><code>Public Sub howto_use_logger_console()\n    Dim Logger As VBAMonologger.LoggerInterface\n    Set Logger = VBAMonologger.Factory.createLoggerConsole(\"App\")\n\n    ' Use the logger for each severity levels\n    Logger.trace \"Authentication function call for user 'Bob Morane'.\" \n    (...)\nEnd Sub    \n</code></pre> <p>When you execute this code, it launches a <code>cmd.exe</code>, and you can view the results in it. The formatter's configuration allows you to customize the color scheme.</p> <p></p> <p>As you can see, in the signature of this factory's method, it is also possible to set the name the logger, to load a custom formatter, and more. We will explore how to fully utilize these options later in the documentation.</p> <pre><code>Public Function createLoggerConsole( _\n    Optional ByVal paramLoggerName As String = vbNullString, _\n    Optional ByRef paramFormatter As FormatterInterface = Nothing, _\n    Optional ByRef paramWithANSIColorSupport As Boolean = True, _\n    Optional ByRef paramWithNewlineForContextAndExtra As Boolean = True, _\n    Optional ByRef paramWithDebugServer As Boolean = False, _\n    Optional ByRef paramWithDebugClient As Boolean = False _\n) As VBAMonologger.Logger\n</code></pre>"},{"location":"getting-started/quick-start.html#log-output-to-a-file","title":"Log output to a file","text":"<p>You can send logs into a file with the default logger file provided by factory's method <code>VBAMonologger.Factory.createLoggerFile()</code>. To ensure compatibility with special and multilingual characters, the UTF-8 encoding is preferred.</p> <p><pre><code>Public Sub howto_use_loggerFile()\n    Dim Logger As VBAMonologger.LoggerInterface\n    Set Logger = VBAMonologger.Factory.createLoggerFile(\"App\")\n\n    ' Logs message for each severity levels\n    Logger.trace \"Authentication function call for user 'Bob Morane'.\"\n    (...)\nEnd Sub\n</code></pre> This logger, provided by the factory's method <code>createLoggerFile</code>, is configured by default:</p> <ul> <li>with the handler <code>VBAMonologger.Handler.HandlerFile</code>, which employs the same default line formatter, <code>VBAMonologger.Formatter.FormatterLine</code>, as the one used by <code>HandlerConsoleVBA</code>.</li> <li>with the pre-processors placeholders: <code>VBAMonologger.Processor.ProcessorPlaceholders</code>, allowing the use of placeholders in log messages that will be replaced with values provided in the log record context.</li> <li>and without a channel name. </li> </ul> <p>By default, this logger writes logs to the <code>./var/log/logfile_yyyy-mm-dd.log</code> file, relative to the path of the workbook (yyyy-mm-dd = date of the day). You can change the name and the folder of the file, into the configuration of <code>VBAMonologger.Handler.HandlerFile</code> or directly into the signature of the factory's method.</p> <pre><code>Public Function createLoggerFile( _\n    Optional ByVal paramLoggerName As String = vbNullString, _\n    Optional ByRef paramFormatter As FormatterInterface = Nothing, _\n    Optional ByVal paramLogFileName As String = vbNullString, _\n    Optional ByVal paramLogFileFolder As String = vbNullString _\n) As VBAMonologger.Logger\n</code></pre> <p>Here\u2019s an example of how to change the name and folder of the log file.</p> <pre><code>Public Sub howto_change_logger_file_name_and_folder()\n    Dim Logger As VBAMonologger.LoggerInterface\n    Set Logger = VBAMonologger.Factory.createLoggerFile( _ \n        paramLoggerName:= \"App\", _\n        paramLogFileName:=\"my-log-file___\"&amp;format(Now, \"yyyy-mm-dd\") &amp; \".log\", _\n        paramLogFileFolder:=ThisWorkbook.Path &amp; \"\\logs\" _        \n    )\n\n    ' Logs message for each severity levels\n    Logger.trace \"Authentication function call for user 'Bob Morane'.\"\n    (...)\nEnd Sub\n</code></pre> <p></p>"},{"location":"getting-started/quick-start.html#next-steps","title":"Next steps","text":"<p>If you skipped the introduction and especially the concepts section, we strongly recommend reading it before moving on to the rest of the documentation.</p>"},{"location":"getting-started/usages/add-context-data-to-log-messages.html","title":"Add context data to log messages","text":""},{"location":"getting-started/usages/add-context-data-to-log-messages.html#what-is-a-log-context","title":"What is a log context?","text":"<p>In addition to the basic log message, you may sometimes want to include extra data that helps to provide more context for the event being logged. You can give a variable context with log message. It is a simply VBA dictionary, where you can store key-value pairs that hold relevant information. When you create a log entry, this context can be attached and will be incorporated into the log output, providing deeper insights into the logged event.</p> <p>This variable can simply be displayed (or not) into the log message, or can be consumed by using placeholders in log message.</p>"},{"location":"getting-started/usages/add-context-data-to-log-messages.html#create-a-log-context","title":"Create a log context","text":"<p>To create a log context (i.e. a VBA dictionary), it is recommended to do it like this:</p> <pre><code>' Set context \nDim context As Object: Set context = CreateObject(\"Scripting.Dictionary\")\ncontext.Add \"Username\", \"v20100v\"\n</code></pre>"},{"location":"getting-started/usages/add-context-data-to-log-messages.html#use-placeholders-into-log-message","title":"Use placeholders into log message","text":"<p>The fields within the context can be accessed as template variables within the log message. This templating engine is provided by the pre-processor <code>ProcessorPlaceholders</code>, which uses context data to replace variables in log messages. It allows to embed context values directly into log message text with placeholders. All template variables are enclosed in <code>{}</code> brackets.</p> <p>Notes, if a particular key doesn\u2019t exist in the context, it will be replaced by an empty string.</p> <p>In the example, the engine automatically replaces the placeholder <code>{username}</code> with its corresponding value from the context dictionary, in this case, <code>v20100v</code>.</p> <pre><code>' Set context \nDim context As Object: Set context = CreateObject(\"Scripting.Dictionary\")\ncontext.Add \"Username\", \"v20100v\"\n\n' Only display log context (if configuration's formatter allow to show it)\nLogger.info \"Adding a new user\", context\n\n' Consume log context with placeholder\nLogger.info \"Adding the new user: '{username}'\", context\n</code></pre> Result<pre><code>[2024-11-05 09:15:34] app.INFO: Adding a new user | {\"Username\": \"v20100v\"}\n[2024-11-05 09:15:34] app.INFO: Adding the new user: 'v20100v' | {\"Username\": \"v20100v\"}\n</code></pre>"},{"location":"getting-started/usages/add-pre-processor.html","title":"Add extra data to log messages via a pre-processor","text":""},{"location":"getting-started/usages/add-pre-processor.html#what-is-a-log-pre-processor","title":"What is a log pre-processor?","text":"<p>Pre-processors are a powerful feature, allowing for additional metadatas to be added to log messages before they are recorded. These functions can be used to enrich log messages with extra information that might not be directly part of the log entry itself, but is still relevant for better understanding and tracking. </p> <p>Pre-processors can modify, format, or even generate additional metadata that can be attached to each log message into the extra property. A logger can reference one or more pre-processors.</p>"},{"location":"getting-started/usages/add-pre-processor.html#default-pre-processor-loaded-in-built-in-loggers","title":"Default pre-processor loaded in built-in loggers","text":"<p>When creating loggers with the factory methods provided by <code>VBAMonologger.Factory</code>, it automatically loads the pre-processor <code>ProcessorPlaceholders</code> for each built-in loggers. This ensures that all log entries include the placeholder's features.</p> Factory method Default pre-processor <code>createLoggerConsoleVBA()</code> <code>ProcessorPlaceholders</code> <code>createLoggerFile()</code> <code>ProcessorPlaceholders</code> <code>createLoggerConsole()</code> <code>ProcessorPlaceholders</code> <p>The <code>ProcessorPlaceholders</code>, allows to replace specific variables, or placeholders, in log messages with their corresponding values, adding dynamic context to the logs. It consumes the log context variable given with the log message.</p>"},{"location":"getting-started/usages/add-pre-processor.html#available-pre-processors","title":"Available pre-processors","text":"<p>In VBA Monologger, several built-in processors offer specific functionalities to enhance the log entry by adding additional context or modifying it in various ways before it is passed to the handlers. Here are some examples of the available pre-processors:</p> Pre-processor Description <code>ProcessorPlaceholders</code> Allows to replace specific variables or placeholders in log messages with their corresponding values, adding dynamic context to the logs. The <code>context</code> variable must be a VBA <code>Scripting.Dictionary</code>. (e.g. <code>logger.info(\"Authentication failed for user '{UserName}' with id '{UserID}'.\", context)</code>. <code>ProcessorTags</code> Adds one or more tags to a log entry. <code>ProcessorUID</code> Adds a unique identifier (UID) to each session . The generated UID consists of hexadecimal characters, and its size can be configured. <code>ProcessorUsageMemory</code> Adds the computer's memory usage to each log entry. The system's current memory status is retrieved using the <code>GlobalMemoryStatusEx</code> API in Windows. <code>ProcessorUsageCPU</code> Adds the computer's cpu usage to each log entry. <p>Result of a logger with pre-processors : placeholders, tags (<code>environment, user_role</code>), UID, usage memory and usage CPU.</p> <pre><code>[2024/12/13 18:59:30] App.INFO: User '35353' has logged in successfully.\n | context: \n | {\n |    \"UserName\": \"Bob\",\n |    \"UserID\": 35353,\n |    \"Operation\": \"create\",\n |    \"environment\": \"production\",\n |    \"user_role\": \"admin\"\n | }\n | extra: \n | {\n |    \"session-UID\": \"A09A248CF0\",\n |    \"memory\": {\n |       \"memory-used\": \"65%\",\n |       \"memory-total\": \"15,23\",\n |       \"memory-available\": \"5,30\"\n |    },\n |    \"CPU-used\": \"21,4%\"\n | }\n</code></pre>"},{"location":"getting-started/usages/add-pre-processor.html#push-pre-processors-into-logger","title":"Push pre-processors into logger","text":"<p>The factory provides <code>pushProcessors</code> methods used to add pre-processor into a given logger. </p> <pre><code>Dim Logger As VBAMonologger.Logger\nSet Logger = VBAMonologger.Factory.createLoggerConsoleVBA()\n\n' Add pre-processors UID\nVBAMonologger.Factory.pushProcessorUID Logger, 8\n\n' Add pre-processors CPU usage\nVBAMonologger.Factory.pushProcessorUsageCPU Logger\n\n' Add pre-processors Memory usage\nVBAMonologger.Factory.pushProcessorUsageMemory Logger\n\n' Add pre-processors Tags\nDim tags As Object\nSet tags = CreateObject(\"Scripting.Dictionary\")\ntags.Add \"environment\", \"production\"\nVBAMonologger.Factory.pushProcessorTags Logger, tags, TAGS_DESTINATION.LOG_EXTRA\n\n' Use logger\nLogger.trace \"Authentication function call.\"\n</code></pre> Result<pre><code>[2024/12/16 18:34:09] DEBUG: Authentication function call. | extra: {\"session-UID\":\"F056D5EE\",\"CPU-used\":\"0,0%\",\"memory-used\":\"62%\",\"tags\":{\"environment\":\"production\"}}\n</code></pre>"},{"location":"getting-started/usages/add-pre-processor.html#show-context-and-extra-data-on-multiples-lines-whitespace","title":"Show context and extra data on multiples lines (whitespace)","text":"<p>By default, the line formatter writes context and extra data on the same line, but you can configure it to display them on multiple lines. To achieve this, it is necessary to inject a custom formatter.</p> <pre><code>Public Sub howto_show_context_and_extra_on_multilples_line()\n    ' Create a custom formatter\n    Dim customFormatter As VBAMonologger.FormatterLine\n    Set customFormatter = VBAMonologger.Factory.createFormatterLine\n    customFormatter.showContext = True\n    customFormatter.showExtra = True\n    customFormatter.setTemplateLineWithNewlineForContextAndExtra\n    customFormatter.withWhitespace = True\n    customFormatter.withAllowingInlineLineBreaks = True\n\n    ' Inject custom formatter\n    Dim Logger As VBAMonologger.Logger\n    Set Logger = VBAMonologger.Factory.createLoggerConsoleVBA( _\n        \"App\", _\n        customFormatter _\n    )\n\n    ' Add pre-processors \n    VBAMonologger.Factory.pushProcessorUID Logger, 8\n    VBAMonologger.Factory.pushProcessorUsageCPU Logger\n    VBAMonologger.Factory.pushProcessorUsageMemory Logger\n    Dim tags As Object\n    Set tags = CreateObject(\"Scripting.Dictionary\")\n    tags.Add \"environment\", \"production\"\n    VBAMonologger.Factory.pushProcessorTags _ \n        Logger, tags, TAGS_DESTINATION.LOG_EXTRA\n\n    ' Set a dummy context\n    Dim context As Object: Set context = CreateObject(\"Scripting.Dictionary\")\n    context.Add \"Username\", \"v20100v\"\n\n    ' Use logger\n    Logger.trace \"Authentication function call.\"\n    Logger.info \"Adding the new user: '{username}'\", context\nEnd Sub\n</code></pre> Result<pre><code>[2024/12/16 18:46:28] App.DEBUG: Authentication function call.\n | extra: \n | {\n |    \"session-UID\": \"F65A0049\",\n |    \"CPU-used\": \"0,0%\",\n |    \"memory-used\": \"61%\",\n |    \"tags\": {\n |       \"environment\": \"production\"\n |    }\n | }\n[2024/12/16 18:46:28] App.INFO: Adding the new user: '{username}'\n | context: \n | {\n |    \"Username\": \"v20100v\"\n | }\n | extra: \n | {\n |    \"session-UID\": \"F65A0049\",\n |    \"CPU-used\": \"0,0%\",\n |    \"memory-used\": \"61%\",\n |    \"tags\": {\n |       \"environment\": \"production\"\n |    }\n | }\n</code></pre>"},{"location":"getting-started/usages/channel.html","title":"Identify a logger with a channel","text":""},{"location":"getting-started/usages/channel.html#what-is-a-channel","title":"What is a channel?","text":"<p>A channel refers to the name given to a specific logger.</p> <p>This name helps categorize and manage log messages effectively. By using different channels, each logger can be configured with specific handlers, formatters, and log levels. This ensures that logs from different parts of an application are handled appropriately and organized for easy analysis. </p> <p>It is a powerful way to identify which part of an application a log entry is associated with. This is especially useful in large applications with multiple components and multiple loggers.</p>"},{"location":"getting-started/usages/channel.html#set-log-channel-into-built-in-loggers","title":"Set log channel into built-in loggers","text":"<p>In each default built-in loggers provided by the VBA Monologger factory (e.g. <code>LoggerConsoleVBA</code>, <code>LoggerConsole</code> or <code>LoggerFile</code>) you can set the name with its first parameter <code>paramLoggerName</code>.</p> <pre><code>Public Sub howto_set_logger_name()\n    ' Create a logger instance with the channel name \"App\"\n    Dim Logger As VBAMonologger.LoggerInterface\n    Set Logger = VBAMonologger.Factory.createLoggerConsoleVBA(\"App\")\n\n    ' Same usage for another default loggers\n    ' Set Logger = VBAMonologger.Factory.createLoggerConsole(\"App\")\n    ' Set Logger = VBAMonologger.Factory.createLoggerFile(\"App\")  \n\n    ' Use the logger for each severity levels\n    Logger.trace \"Authentication function call for user 'Bob Morane'.\" \n    Logger.info \"User 'UltraVomit' has logged in successfully.\"\n    Logger.notice \"Process completed successfully with minor issues.\"\n    Logger.warning \"'Beetlejuice' should not be called more than 3 times.\"\n    Logger.error \"An error occurred with the user 'DRZCFOS2'.\"\n    Logger.critical \"System is in an unstable state.\"\n    Logger.alert \"Action required: unable to generate the dashboard.\"\n    Logger.emergency \"A critical failure occurred in the application.\"\nEnd Sub\n</code></pre> Result in VBA console<pre><code>[2024/12/16 12:51:17] App.DEBUG: Authentication function call for user 'Bob Morane'.\n[2024/12/16 12:51:17] App.INFO: User 'UltraVomit' has logged in successfully.\n[2024/12/16 12:51:17] App.NOTICE: Process completed successfully with minor issues.\n[2024/12/16 12:51:17] App.WARNING: The user 'Beetlejuice' should not be called more than 3 times.\n[2024/12/16 12:51:17] App.ERROR: An error occurred when the user 'DeadRobotZombieCopFromOuterspace' tried to read the dashboard file.\n[2024/12/16 12:51:17] App.CRITICAL: System is in an unstable state. Unable to authenticate the user 'Skjalg Skagen'.\n[2024/12/16 12:51:17] App.ALERT: Action required: unable to generate the dashboard.\n[2024/12/16 12:51:17] App.EMERGENCY: A critical failure occurred in the application for moving files.\n</code></pre>"},{"location":"getting-started/usages/channel.html#set-loggers-name-into-empty-logger","title":"Set logger's name into empty logger","text":"<p>If you create a simple logger without handlers and pre-processors, as an empty logger, use the <code>name</code> property to change its channel name.</p> <pre><code>Public Sub howto_set_logger_name()\n    ' Create an emtpy logger (without handler, pre-processors...)\n    Dim Logger As VBAMonologger.Logger\n    Set Logger = VBAMonologger.Factory.createLogger()\n\n    ' Set the channel name\n    Logger.name = \"App\"\nEnd Sub\n</code></pre>"},{"location":"getting-started/usages/create-custom-formatter.html","title":"Create a custom formatter","text":""},{"location":"getting-started/usages/create-custom-formatter.html#what-is-a-log-formatter","title":"What is a log formatter?","text":"<p>A log handler is a key component responsible for processing each log entry. When a log message is generated, it is not simply recorded; it must be directed to a location where it can be viewed and used. This is where the handler comes in, determining where and how each log entry will be sent or saved (show into console, send to a file, send by mail...). And each \"log handler\" is associated with a unique log formatter. </p> <p>The formatter is a specialized component responsible for defining the structure and presentation of log messages. The formatter processes and organizes each log entry, converting it from its raw form to a readable format tailored to a specific type (text, HTML, JSON, etc.). This process can be seen as similar to the serialization of a log record.</p>"},{"location":"getting-started/usages/create-custom-formatter.html#default-formatter-used-in-built-in-loggers","title":"Default formatter used in built-in loggers","text":"<p>When creating loggers with the factory methods provided by <code>VBAMonologger.Factory</code>, the type of handler and its formatter depend on the target output (VBA console, file, or Windows console). </p> Factory method Default handler Default formatter <code>createLoggerConsoleVBA()</code> <code>HandlerConsoleVBA</code> <code>FormatterLine</code> <code>createLoggerFile()</code> <code>HandlerFile</code> <code>FormatterLine</code> <code>createLoggerConsole()</code> <code>HandlerConsole</code> <code>FormatterANSIcoloredLine</code> if ANSI color support is enabled with <code>paramWithANSIColorSupport=true</code>), and otherwise <code>FormatterLine</code>. <p>As you can see in each factory method's signatures, you can use the option <code>paramFormatter</code> to load a custom formatter.</p> createLoggerConsoleVBAcreateLoggerFilecreateLoggerConsole <pre><code>Public Function createLoggerConsoleVBA( _\n    Optional ByVal paramLoggerName As String = vbNullString, _\n    Optional ByRef paramFormatter As FormatterInterface = Nothing _\n) As VBAMonologger.Logger\n</code></pre> <pre><code>Public Function createLoggerFile( _\n    Optional ByVal paramLoggerName As String = vbNullString, _\n    Optional ByRef paramFormatter As FormatterInterface = Nothing, _\n    Optional ByVal paramLogFileName As String = vbNullString, _\n    Optional ByVal paramLogFileFolder As String = vbNullString _\n) As VBAMonologger.Logger\n</code></pre> <pre><code>Public Function createLoggerConsole( _\n    Optional ByVal paramLoggerName As String = vbNullString, _\n    Optional ByRef paramFormatter As FormatterInterface = Nothing, _\n    Optional ByRef paramWithANSIColorSupport As Boolean = True, _\n    Optional ByRef paramWithNewlineForContextAndExtra As Boolean = True, _\n    Optional ByRef paramWithDebugServer As Boolean = False, _\n    Optional ByRef paramWithDebugClient As Boolean = False _\n) As VBAMonologger.Logger\n</code></pre>"},{"location":"getting-started/usages/create-custom-formatter.html#create-a-custom-formatter","title":"Create a custom formatter","text":"<p>To illustrate how to load a custom formatter, we will create a new line formatter with a different line template, but it works the same way with any formatter.</p> <p>The <code>FormatterLine</code> uses a line template, as a string, in order to format each log entry. This line template defines the representation of a log entry, with placeholders that will be replaced by actual values from the log record. So you can customize the template to fit your needs. For example, if you prefer a simpler format or want to add additional information, you can easily adjust the template using the <code>templateLine</code> property.</p> <p>Understanding the line template behavior</p> <p>The formatting system of <code>FormatterLine</code> uses regular expressions to handle placeholders within the line template, allowing them to be defined with prefixes and suffixes to modify their final output. The prefix text is added before the placeholder\u2019s value, and the suffix text is added after the placeholder's value. And if a placeholder has no value, then the prefix and postfix are not displayed in the final output.</p> <p>Here\u2019s how a placeholder can be structured in the template:</p> <pre><code>{{ &lt;prefix/&gt; placeholder &lt;suffix/&gt; }}\n</code></pre> <p>By default, the line template of <code>VBAMonologger.Formatter.FormatterLine</code> looks like the following:</p> Line template<pre><code>[{{datetime}}] {{channel}}.{{level_name}}: {{message}}{{&lt; | ctx=/&gt; context}}{{&lt; | extra=/&gt; extra}}\n</code></pre> <p>The following placeholders are included:</p> Placeholder\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>{{datetime}}</code> The date and time of the log entry. <code>{{channel}}</code> The channel (or source) from which the log originates. <code>{{level_name}}</code> The log level (e.g., <code>INFO</code>, <code>ERROR</code>, <code>DEBUG</code> ...). <code>{{message}}</code> The main log message. <code>{{context}}</code> The log context data. This includes arbitrary key-value pairs. <code>{{extra}}</code> Extra metadata or custom information attached to the log entry. This can include arbitrary key-value pairs, typically added by pre-processors. <p>Here's an example of a new custom line formatter.</p> <pre><code>Public Sub howto_create_custom_formatter()\n    ' Create a custom formatter\n    Dim customFormatter As VBAMonologger.FormatterLine\n    Set customFormatter = VBAMonologger.Factory.createFormatterLine\n    customFormatter.templateLine = \":: {{ channel }}.{{ level_name }} - {{ message }}\"\nEnd Sub\n</code></pre>"},{"location":"getting-started/usages/create-custom-formatter.html#load-a-custom-formatter-into-logger","title":"Load a custom formatter into logger","text":"<p>Just fill the parameter <code>paramFormatter</code> in factory's method, or if you have an instance of <code>Handler</code> used by the logger, you can use the property <code>formatter</code> directly.</p> <pre><code>Public Sub howto_change_formatter()\n    ' Create a custom formatter\n    Dim customFormatter As VBAMonologger.FormatterLine\n    Set customFormatter = VBAMonologger.Factory.createFormatterLine\n    customFormatter.templateLine = \":: {{ channel }}.{{ level_name }} - {{ message }}\"\n\n    ' Load custom formatter into logger\n    Set Logger = VBAMonologger.Factory.createLoggerConsoleVBA( _\n        paramLoggerName:=\"App\", _\n        paramFormatter:=customFormatter _\n    )\n\n    ' Logs message for each severity levels\n    Logger.trace \"Authentication function call for user 'Bob Morane'.\" \n    Logger.info \"User 'UltraVomit' has logged in successfully.\"\n    Logger.notice \"Process completed successfully with minor issues.\"\n    Logger.warning \"'Beetlejuice' should not be called more than 3 times.\"\n    Logger.error \"An error occurred with the user 'DRZCFOS2'.\"\n    Logger.critical \"System is in an unstable state.\"\n    Logger.alert \"Action required: unable to generate the dashboard.\"\n    Logger.emergency \"A critical failure occurred in the application.\"\nEnd Sub\n</code></pre> <p>Result in VBA console:</p> With custom formatterWith default line formatter <pre><code>:: App.DEBUG - Authentication function call for user 'Bob Morane'.\n:: App.INFO - User 'UltraVomit' has logged in successfully.\n:: App.NOTICE - Process completed successfully with minor issues.\n:: App.WARNING - The user 'Beetlejuice' should not be called more than 3 times.\n:: App.ERROR - An error occurred when the user 'DeadRobotZombieCopFromOuterspace' tried to read the dashboard file.\n:: App.CRITICAL - System is in an unstable state. Unable to authenticate the user 'Skjalg Skagen'.\n:: App.ALERT - Action required: unable to generate the dashboard.\n:: App.EMERGENCY - A critical failure occurred in the application for moving files.\n</code></pre> <pre><code>[2024/12/16 12:51:17] App.DEBUG: Authentication function call for user 'Bob Morane'.\n[2024/12/16 12:51:17] App.INFO: User 'UltraVomit' has logged in successfully.\n[2024/12/16 12:51:17] App.NOTICE: Process completed successfully with minor issues.\n[2024/12/16 12:51:17] App.WARNING: The user 'Beetlejuice' should not be called more than 3 times.\n[2024/12/16 12:51:17] App.ERROR: An error occurred when the user 'DeadRobotZombieCopFromOuterspace' tried to read the dashboard file.\n[2024/12/16 12:51:17] App.CRITICAL: System is in an unstable state. Unable to authenticate the user 'Skjalg Skagen'.\n[2024/12/16 12:51:17] App.ALERT: Action required: unable to generate the dashboard.\n[2024/12/16 12:51:17] App.EMERGENCY: A critical failure occurred in the application for moving files.\n</code></pre>"},{"location":"getting-started/usages/create-custom-logger.html","title":"Create a custom logger from scratch","text":""},{"location":"getting-started/usages/create-custom-logger.html#custom-logger-with-one-handler","title":"Custom logger with one handler","text":"<p>In this example, we create an empty logger, and we push into a unique handler for VBA console with a custom formatter.</p>"},{"location":"getting-started/usages/create-custom-logger.html#instantiate-an-empty-logger","title":"Instantiate an empty logger","text":"<p>To create a simple logger without any handlers or pre-processors, essentially an empty logger, you can utilize the factory method <code>VBAMonologger.Factory.createLogger</code> as follows:</p> <pre><code>Public Sub howto_create_empty_logger()\n    ' Create an emtpy logger (without handler, pre-processors...)\n    Dim Logger As VBAMonologger.Logger\n    Set Logger = VBAMonologger.Factory.createLogger()\n    Logger.name = \"App\"\nEnd Sub\n</code></pre>"},{"location":"getting-started/usages/create-custom-logger.html#instantiate-handler-with-a-custom-line-formatter","title":"Instantiate handler with a custom line formatter","text":"<p>To illustrate how to load a custom formatter, we will create a new line formatter with a different line template, but it works the same way with any formatter. </p> <p>Check this out for additional details on creating a custom formatter.</p> <pre><code>Public Sub howto_create_handler_with_custom_formatter()\n    ' Create a custom line formatter\n    Dim customFormatterLine As VBAMonologger.FormatterLine\n    Set customFormatterLine = VBAMonologger.Factory.createFormatterLine\n    customFormatterLine.showContext = True\n    customFormatterLine.showExtra = True\n    customFormatterLine.withAllowingInlineLineBreaks = False\n    customFormatterLine.templateLine = _ \n        \":: {{ channel }}{{ level_name }} - {{ message }}\"\n\n    ' Create a console VBA handler with this custom line formatter\n    Dim customHandlerConsoleVBA As VBAMonologger.HandlerConsoleVBA\n    Set customHandlerConsoleVBA = VBAMonologger.Factory.createHandlerConsoleVBA\n    Set customHandlerConsoleVBA.formatter = customFormatterLine        \nEnd Sub\n</code></pre>"},{"location":"getting-started/usages/create-custom-logger.html#push-handler-into-logger","title":"Push handler into logger","text":"<p>To load a handler into the logger, just use the <code>pushHandler</code> Logger's method, as follows: </p> <pre><code>Public Sub howto_push_handler_into_empty_logger()\n    ' Create an emtpy logger (without handler, pre-processors...)\n    Dim Logger As VBAMonologger.Logger\n    Set Logger = VBAMonologger.Factory.createLogger()\n    Logger.name = \"App\"    \n\n    ' Create a custom line formatter\n    Dim customFormatterLine As VBAMonologger.FormatterLine\n    Set customFormatterLine = VBAMonologger.Factory.createFormatterLine\n    customFormatterLine.showContext = True\n    customFormatterLine.showExtra = True\n    customFormatterLine.withAllowingInlineLineBreaks = False\n    customFormatterLine.templateLine = _ \n        \":: {{ channel }}{{ level_name }} - {{ message }}\"\n\n    ' Create a console VBA handler with this custom line formatter\n    Dim customHandlerConsoleVBA As VBAMonologger.HandlerConsoleVBA\n    Set customHandlerConsoleVBA = VBAMonologger.Factory.createHandlerConsoleVBA\n    Set customHandlerConsoleVBA.formatter = customFormatterLine\n\n    ' Push the handler into empty logger\n    customLogger.pushHandler customHandlerConsoleVBA\n\n    ' Use the custom logger for each severity levels\n    customLogger.trace \"Authentication function call for user 'Bob Morane'.\" \n    customLogger.info \"User 'UltraVomit' has logged in successfully.\"\n    customLogger.notice \"Process completed successfully with minor issues.\"\n    customLogger.warning \"'Beetlejuice' should not be called more than 3 times.\"\n    customLogger.error \"An error occurred with the user 'DRZCFOS2'.\"\n    customLogger.critical \"System is in an unstable state.\"\n    customLogger.alert \"Action required: unable to generate the dashboard.\"\n    customLogger.emergency \"A critical failure occurred in the application.\"    \nEnd Sub\n</code></pre> Result<pre><code>:: App.DEBUG - Authentication function call for user 'Bob Morane'.\n:: App.INFO - User 'UltraVomit' has logged in successfully.\n:: App.NOTICE - Process completed successfully with minor issues.\n:: App.WARNING - The user 'Beetlejuice' should not be called more than 3 times.\n:: App.ERROR - An error occurred when the user 'DeadRobotZombieCopFromOuterspace' tried to read the dashboard file.\n:: App.CRITICAL - System is in an unstable state. Unable to authenticate the user 'Skjalg Skagen'.\n:: App.ALERT - Action required: unable to generate the dashboard.\n:: App.EMERGENCY - A critical failure occurred in the application for moving files.\n</code></pre>"},{"location":"getting-started/usages/create-custom-logger.html#custom-logger-with-multilpes-handlers-ie-destinations","title":"Custom logger with multilpes handlers (i.e. destinations)","text":"<p>In this example, we create an empty logger, and we push into multiples handlers with different formatters.</p> <ul> <li>a handler for output log into console VBA</li> <li>a handler for output log into console</li> <li>a handler for output log into file only for error log records (level &gt;= error)</li> <li>and with the following preprocessors: placeholders, UID, CPU usage, memory usage, and tags.</li> </ul> <pre><code>Public Sub howto_create_custom_Logger_with_multiples_handlers()\n    Dim customLogger As VBAMonologger.Logger\n    Set customLogger = VBAMonologger.Factory.createLogger\n\n    ' Create a console VBA handler using a custom line formatter\n    Dim customFormatterLine As VBAMonologger.FormatterLine\n    Set customFormatterLine = VBAMonologger.Factory.createFormatterLine\n    customFormatterLine.showContext = True\n    customFormatterLine.showExtra = True\n    customFormatterLine.withAllowingInlineLineBreaks = False\n    customFormatterLine.templateLine = _ \n        \":: {{ channel }}{{ level_name }} - {{ message }}\"\n    Dim customHandlerConsoleVBA As VBAMonologger.HandlerConsoleVBA\n    Set customHandlerConsoleVBA = VBAMonologger.Factory.createHandlerConsoleVBA\n    Set customHandlerConsoleVBA.formatter = customFormatterLine\n\n    ' Create a Windows console handler with default formatter (ANSI support)\n    Dim customHandlerConsole As VBAMonologger.HandlerConsole\n    Set customHandlerConsole = VBAMonologger.Factory.createHandlerConsole\n    customHandlerConsole.portServer = 20101\n    customHandlerConsole.hostnameServer = \"127.0.0.1\"\n    customHandlerConsole.withANSIColorSupport = True\n    customHandlerConsole.withDebug = False\n    customHandlerConsole.withNewlineForContextAndExtra = True\n    customHandlerConsole.startServerLogsViewer\n\n    ' Create a file handler with a custom formatter and which captures only \n    ' error log records (i.e. with level &gt;= LEVEL_ERROR)\n    Dim customHandlerFile As VBAMonologger.handlerFile\n    Set customHandlerFile = VBAMonologger.Factory.createHandlerFile\n    customHandlerFile.logFileName = \"error_\" &amp; Format(Now, \"yyyy-mm-dd\") &amp; \".log\"\n    customHandlerFile.logFileFolder = ThisWorkbook.Path &amp; \"\\logs\"\n    customHandlerFile.Level = LEVEL_ERROR\n    Dim formatter As VBAMonologger.FormatterLine\n    Set formatter = customHandlerFile.formatter\n    formatter.setTemplateLineWithNewlineForContextAndExtra\n    formatter.withWhitespace = True\n    formatter.withAllowingInlineLineBreaks = True\n\n    ' Push handlers into custom logger\n    customLogger.pushHandler customHandlerConsoleVBA\n    customLogger.pushHandler customHandlerConsole\n    customLogger.pushHandler customHandlerFile\n\n    ' Add pre-processors into custom loggers\n    VBAMonologger.Factory.pushProcessorPlaceholders customLogger\n    VBAMonologger.Factory.pushProcessorUID customLogger, 8\n    VBAMonologger.Factory.pushProcessorUsageCPU customLogger\n    VBAMonologger.Factory.pushProcessorUsageMemory customLogger\n    Dim tags As Object\n    Set tags = CreateObject(\"Scripting.Dictionary\")\n    tags.Add \"environment\", \"production\"\n    VBAMonologger.Factory.pushProcessorTags customLogger, tags, TAGS_DESTINATION.LOG_EXTRA\n\n    ' Use the custom logger\n    customLogger.trace \"Authentication function call for user 'Bob Morane'.\" ' The 'debug' method exposes presents in PSR-3 is rename into 'trace' in order to be compatible in VBA ecosystem\n    customLogger.info \"User 'Ultra Vomit' has logged in successfully.\"\n    customLogger.notice \"Process completed successfully with minor issues.\"\n    customLogger.warning \"The user 'Beetlejuice' should not be called more than 3 times.\"\n    customLogger.Error \"An error occurred when the user 'DeadRobotZombieCopFromOuterspace' tried to read the dashboard file.\"\n    customLogger.critical \"System is in an unstable state. Unable to authenticate the user 'Skjalg Skagen'.\"\n    customLogger.alert \"Action required: unable to generate the dashboard.\"\n    customLogger.emergency \"A critical failure occurred in the application for moving files.\"\n\n    Dim context As Object: Set context = CreateObject(\"Scripting.Dictionary\")\n    context.Add \"UserName\", \"Bob Morane\"\n    context.Add \"UserID\", 342527\n    customLogger.trace \"Authentication function call for user '{UserName}' with id '{UserID}'.\", context\n    customLogger.Error \"User id '{UserID}' does not exist. Unable to create dashboard file.\", context\nEnd Sub\n</code></pre> <p></p>"},{"location":"getting-started/usages/create-null-logger.html","title":"Create a null logger","text":""},{"location":"getting-started/usages/create-null-logger.html#why-choose-a-null-logger","title":"Why choose a null logger?","text":"<p>Using a null Logger can be quite useful in several situations:</p> <ol> <li>In testing or development: When writing tests or developing applications, you might not need logs. A Null Logger allows you to disable logging without changing your production code.</li> <li>Selective log disabling: Sometimes, you may want to disable logging for specific parts of your application without completely removing log calls. The null Logger can be injected where logging is unnecessary.</li> <li>Performance: In performance-sensitive environments, avoiding logging operations can reduce latency and improve performance.</li> </ol> <p>In summary, the null Logger is a practical solution for managing logs flexibly and efficiently, allowing you to temporarily or conditionally disable logging without altering the rest of your code.</p>"},{"location":"getting-started/usages/create-null-logger.html#create-a-null-logger","title":"Create a null logger","text":"<p>The factory provides a method to create a null logger.</p> <pre><code>Public Sub howto_create_null_logger()\n    ' Create a null logger instance that does nothing!\n    Dim LoggerNull As VBAMonologger.LoggerInterface\n    Set LoggerNull = VBAMonologger.Factory.createLoggerNull()\n\n    ' Logs message for each severity levels\n    LoggerNull.trace \"Authentication function call for user 'Bob Morane'.\" \n    LoggerNull.info \"User 'UltraVomit' has logged in successfully.\"\n    LoggerNull.notice \"Process completed successfully with minor issues.\"\n    LoggerNull.warning \"'Beetlejuice' should not be called more than 3 times.\"\n    LoggerNull.error \"An error occurred with the user 'DRZCFOS2'.\"\n    LoggerNull.critical \"System is in an unstable state.\"\n    LoggerNull.alert \"Action required: unable to generate the dashboard.\"\n    LoggerNull.emergency \"A critical failure occurred in the application.\"\nEnd Sub\n</code></pre>"},{"location":"getting-started/usages/inject-logger-into-custom-class-module.html","title":"Dependency injection in a custom class module","text":""},{"location":"getting-started/usages/inject-logger-into-custom-class-module.html#dependency-injection","title":"Dependency injection?","text":"<p>Dependency Injection is a design pattern used to implement IoC (Inversion of Control), allowing a class's dependencies to be injected into it rather than the class creating them itself. This software design technique enhances flexibility and modularity in applications. It involves providing the dependencies required by a class at instantiation time, rather than creating them within the class.</p> <p>When a class implements the LoggerAware interface, it allows for a logger object to be injected into it from the outside, typically by a dependency injection container. This way, the class becomes flexible and testable, as you can easily swap out the logger for another implementation or a mock for testing purposes. </p>"},{"location":"getting-started/usages/inject-logger-into-custom-class-module.html#logger-aware-interface","title":"Logger aware interface","text":"<p>The <code>VBAMonlogger.Log.LoggerAwareInterface</code> is an interface used to enable dependency injection for logging capabilities in a custom class. Its purpose is to standardize how a logger is injected into a class. This allows any class that implements the interface to receive a logger instance, which it can then use to log messages. In this case, the dependency is the logger.</p>"},{"location":"getting-started/usages/inject-logger-into-custom-class-module.html#implementation-of-loggerawareinterface","title":"Implementation of <code>LoggerAwareInterface</code>","text":"<p>Here's an example of a class implementing the <code>VBAMonologger.LoggerAwareInterface</code> interface:</p> DummyClassUsingLoggerAware.cls<pre><code>Option Explicit\n\nImplements VBAMonologger.LoggerAwareInterface\n\nPrivate Logger As VBAMonologger.LoggerInterface\n\n' -------------------------------------- '\n'  Implementation: LoggerAwareInterface  '\n' -------------------------------------- '\n'@inheritdoc\nPrivate Sub LoggerAwareInterface_setLogger(paramLogger As LoggerInterface)\n    Set Logger = paramLogger\nEnd Sub\n\n'@Description(\"Proxy method for public exposition.\")\nPublic Sub setLogger(paramLogger As LoggerInterface)\n    Call LoggerAwareInterface_setLogger(paramLogger)\nEnd Sub\n\n' ---------------- '\n'  Public methods  '\n' ---------------- '\nPublic Sub foo()\n    ' Minimal exemple of using the \"injected\" logger\n    Logger.info \"I believe I can fly!\"\n\n    ' Using the \"injected\" logger with a log context and placeholders\n    Dim context As Object: Set context = CreateObject(\"Scripting.Dictionary\")\n    context.Add \"User\", \"Bob\"\n    context.Add \"Operation\", \"fly\"\n    Logger.notice \"I believe {User} can {Operation} in the sky\", context\nEnd Sub\n</code></pre>"},{"location":"getting-started/usages/inject-logger-into-custom-class-module.html#injecting-a-real-logger-into-custom-object","title":"Injecting a real logger into custom object","text":"<p>To inject a logger into an object, you can use the following code:</p> <p>DummyModule.bas<pre><code>Public Sub howto_use_dependency_injection_logger()\n    Dim myDummyClass As New DummyClassUsingLoggerAware\n\n    ' Inject a logger into object\n    Dim Logger As VBAMonologger.Logger\n    Set Logger = VBAMonologger.Factory.createLoggerConsoleVBA(\"App\")\n    Call myDummyClass.setLogger(Logger)\n\n    ' In foo method of DummyClass, we use the logger\n    Debug.Print \"=== Use the logger by dependencies injection ===\"\n    myDummyClass.foo\n    Debug.Print \"\"\nEnd Sub\n</code></pre> Result<pre><code>=== Use the logger by dependencies injection ===\n[2024/12/19 11:31:18] App.INFO: I believe I can fly!\n[2024/12/19 11:31:19] App.NOTICE: I believe Bob can fly in the sky | context: {\"User\":\"Bob\",\"Operation\":\"fly\"}\n</code></pre></p>"},{"location":"under-the-hood/index.html","title":"Under the Hood","text":"<p>The idea is to dive deep, step by step, and see what\u2019s happening under the hood of VBA Monologger. Each component plays a vital role in ensuring logs are structured, meaningful, handled and routed effectively.  </p> <p>Below are the key components and their roles:</p> <ul> <li> <p> Log levels   Classify the importance of log messages, ranging from detailed debugging information to critical errors that require immediate attention.</p> </li> <li> <p> Log record   Captures detailed information about an event or action within an application, forming the core of a log entry.</p> </li> <li> <p> Formatter   Structures log messages into a specific format, making them readable and suited for various outputs such as JSON, text, or HTML.</p> </li> <li> <p> Handler   Routes log records to their appropriate destinations, such as files, console outputs, or external systems.</p> </li> <li> <p> Pre-Processor   Adds or modifies context in log entries before they are formatted or handled, providing flexibility and enrichment to the log data.</p> </li> <li> <p> Logger   The central component that orchestrates logging by managing levels, handlers, formatters, and pre-processors to ensure seamless log management.</p> </li> </ul>"},{"location":"under-the-hood/formatter.html","title":"Formatter","text":""},{"location":"under-the-hood/formatter.html#concept","title":"Concept","text":"<p>A log formatter is used to transform and structure a log record into a readable representation that adheres to a specific format (e.g., text file, JSON, HTML\u2026). </p> <p>VBA Monologger provides the following formatters:</p> Log Formatter Description <code>FormatterLine</code> The default formatter that represents each log entry on a single line of text. <code>FormatterANSIColoredLine</code> A version derived from FormatterLine that supports color coding each log entry line by using ANSI escape sequences. <code>FormatterJSON</code> Formats the logs in JSON. This is the most interoperable format, facilitating integration with external log aggregation and analysis tools (e.g., ELK stack). (not yet available) <code>FormatterHTML</code> Produces messages in HTML format, typically used when sending logs via email. (not yet available)"},{"location":"under-the-hood/formatter.html#modeling","title":"Modeling","text":"<p>Its behavior is defined in the <code>VBAMonologger.Formatter.FormatterInterface</code>, which exposes two methods.</p> <pre><code>Function format(ByRef record As LogRecordInterface) As Variant\n</code></pre> <p>This method takes a log record (an instance implementing <code>LogRecordInterface</code>) as input and returns a formatted representation of that record. The output can be a string or any other data type, depending on the specific implementation of the formatter. The generated output includes information such as the creation date and time of the record, the channel, log level, message, context, and additional data.</p> <pre><code>Function formatBatch(ByRef records() As LogRecordInterface) As Variant\n</code></pre> <p>This method formats an array of log records. It iterates through each record in the array, applies the defined formatting, and returns output that combines all the formatted records.</p> <p>By providing this interface, it is easy to implement different types of formatters without modifying or intervening in the client code that uses these formatters. New formatters can be added to the system at any time, as long as they adhere to the methods defined in the interface.</p>"},{"location":"under-the-hood/formatter.html#formatterline-the-default-formatter","title":"FormatterLine, the default formatter","text":"<p>Let's demonstrate an implementation of <code>FormatterInterface</code> with the <code>FormatterLine</code> class. It is the default formatter that outputs a log entry as a single-line text representation.</p> <pre><code>classDiagram\n    direction TB\n\n    class FormatterInterface {\n        &lt;&lt;Interface&gt;&gt;\n        +Function format(ByRef record As LogRecordInterface) As Variant\n        +Function formatBatch(ByRef records() As LogRecordInterface) As Variant\n    }\n\n    class FormatterLine {\n        &lt;&lt;Class&gt;&gt;\n        +Function construct(Optional paramTemplateLine As String, Optional paramWhitespace As Variant) As FormatterInterface\n        +Property Get templateLine() As String\n        +Property Let templateLine(ByVal newTemplateLine As String)\n        +Function setTemplateLineDefault() As void\n        +Function setTemplateLineWithNewlineForContextAndExtra() As void\n        +Function format(ByRef paramLogRecord As LogRecordInterface) As Variant\n        +Function formatBatch(ByRef records() As LogRecordInterface) As Variant\n        +Function toString() As String\n        -Function pApplyPlaceholder((ByVal output As String, placeholder As String, value As String) As String\n        -Function pRemoveEmptyPlaceholder(ByVal output As String, placeholder As String) As String\n        -Function pGetPrefixFromTemplate(ByVal templateLine As String, ByVal placeholder As String) As String\n        -Function pAddPrefixToJsonLines(ByVal json As String, ByVal prefix As String) As String\n\n        -Const TEMPLATE_LINE_SIMPLE As String\n        -String pTemplateLine\n        -Variant pWhitespace\n        -Boolean showContext\n        -Boolean showExtra\n        -Boolean withAllowingInlineLineBreaks\n        -Boolean withWhitespace\n        -String withPrefixToJsonLines\n    }\n\n    FormatterLine ..|&gt; FormatterInterface : Implements\n    FormatterLine ..|&gt; StringableInterface : Implements</code></pre>"},{"location":"under-the-hood/formatter.html#creating-a-line-formatter","title":"Creating a line formatter","text":"<p>Here\u2019s how to create a line formatter and use it on log entries.</p> <p><pre><code>Dim formatter As VBAMonologger.FormatterLine\nSet formatter = New VBAMonologger.FormatterLine\nDebug.Print formatter.toString\n\nDebug.Print \"&gt;&gt;&gt; Output a minimal log record\"\nSet dummyRecord = dummyRecord.construct( _\n  \"I believe I can fly!\", _\n  VBAMonologger.LEVEL_INFO\n)\nDebug.Print formatter.format(dummyRecord) &amp; vbCrLf\n</code></pre> Result<pre><code>[VBAMonologger.Formatter.FormatterLine]\n| Template line: [{{ datetime }}] {{ channel &lt;./&gt;}}{{ level_name }}: {{ message }}{{&lt; | ctx=/&gt; context }}{{&lt; | extra=/&gt; extra }}\n| Show context: True\n| Show extra: True\n\n&gt;&gt;&gt; Output a minimal log record\n[2024/11/12 16:13:44] INFO: I believe I can fly\n</code></pre></p>"},{"location":"under-the-hood/formatter.html#format-a-log-record-with-channel","title":"Format a log record with channel","text":"<p><pre><code>Debug.Print \"&gt;&gt;&gt; Output record with channel name\"\nSet dummyRecord = dummyRecord.construct( _\n  \"I believe I can fly!\", _\n  VBAMonologger.LEVEL_NOTICE, _\n  \"App\" _\n)\nDebug.Print formatter.format(dummyRecord)\n</code></pre> Result<pre><code>&gt;&gt;&gt; Output record with channel name\n[2024/11/12 16:13:44] App.NOTICE: I believe I can fly\n</code></pre></p>"},{"location":"under-the-hood/formatter.html#format-a-log-record-with-context-and-extra-metadata","title":"Format a log record with context and extra metadata","text":"<p><pre><code>Debug.Print \"&gt;&gt;&gt; Output log record with context and extra metadatas\"\nSet dummyRecord = dummyRecord.construct( _\n  \"I believe I can fly!\", _\n  VBAMonologger.LEVEL_NOTICE, _\n  \"App.Authentification\", _\n  logContext, _\n  logExtra\n)\nDebug.Print formatter.format(dummyRecord)\n</code></pre> Result<pre><code>&gt;&gt;&gt; Output log record with context and extra metadatas\n[2024/11/12 16:13:44] App.Authentification.EMERGENCY: A critical failure occurred in the application | ctx={\"UserName\":\"v20100v\",\"UserID\":25508,\"Operation\":\"Create\"} | extra={\"ExecutionTime\":\"3,9127 seconds\"}\n</code></pre></p>"},{"location":"under-the-hood/formatter.html#batch-log-management","title":"Batch log management","text":"<p>This class also supports batch processing of multiple log entries, according to the implementation of the interface <code>VBAMonologger.Formatter.FormatterInterface</code>. The <code>formatBatch</code> method allows you to format a series of log records and concatenate them into a single string, which is useful when you want to display or save multiple logs at once.</p>"},{"location":"under-the-hood/formatter.html#customizing-the-line-template","title":"Customizing the line template","text":"<p>The <code>FormatterLine</code> uses a line template, as a string, in order to format each log entry. It uses regular expressions to handle placeholders within the line template, allowing them to be defined with prefixes and suffixes to modify their final output. This template defines the representation of a log entry, with line placeholders that will be replaced by actual values from the log record. Please note, this is unrelated to the preprocessors placeholders. It's a different templating engine.</p> <p>A prefix text can be added before the placeholder\u2019s value, and also a suffix text can be added after the placeholder's value. If a placeholder has no value, then the prefix and postfix are not displayed in the final output. Here\u2019s how a placeholder can be structured in the template:</p> <pre><code>{{ &lt;prefix/&gt; placeholder &lt;suffix/&gt; }}\n</code></pre> <p>The line formatter provides two lines templates:</p> <ul> <li> <p>A default line template, enable by default or by <code>formatter.setTemplateLineDefault()</code> method. It looks like the following:    Default line template<pre><code>[{{ datetime }}] {{ channel &lt;./&gt;}}{{ level_name }}: {{ message }}{{&lt; | context: /&gt; context }}{{&lt; | extra: /&gt; extra }}\n</code></pre></p> </li> <li> <p>And a line template with newline for log context and extra, that you can enable it with the method <code>formatter.setTemplateLineWithNewlineForContextAndExtra()</code> Line template with new line for data context and extra<pre><code>[{{ datetime }}] {{ channel &lt;./&gt;}}{{ level_name }}: {{ message }}{{&lt;\\n | context: /&gt; context }}{{&lt;\\n | extra: /&gt; extra }}\n</code></pre></p> </li> </ul>"},{"location":"under-the-hood/formatter.html#available-placeholders","title":"Available placeholders","text":"<p>These placeholders include:</p> Placeholder\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>{{datetime}}</code> The date and time of the log entry. <code>{{channel}}</code> The channel (or source) from which the log originates. <code>{{level_name}}</code> The log level (e.g., <code>INFO</code>, <code>ERROR</code>, <code>DEBUG</code> ...). <code>{{message}}</code> The main log message. <code>{{context}}</code> The log context data. This includes arbitrary key-value pairs. <code>{{extra}}</code> Extra metadata or custom information attached to the log entry. This includes arbitrary key-value pairs, typically added by pre-processors. <p>So you can customize the template to fit your needs. </p> <p>For example, if you prefer a simpler format or want to add additional information, you can easily adjust the template using the templateLine property. This provides flexibility in defining the exact format of your logs, whether for console output or a log file.</p>"},{"location":"under-the-hood/formatter.html#changing-the-line-template","title":"Changing the line template","text":"<p>To change the template line just set the property <code>templateLine</code>. With this line template, it will produce new output:</p> <pre><code>Set formatter = New VBAMonologger.FormatterLine\nformatter.templateLine = _ \n   \"{{datetime}} | {{ channel }} | {{ level_name }} | {{ message }}\"\n</code></pre> Result with new template<pre><code>&gt;&gt;&gt; Output minimal log record \n2024/11/12 16:11:24 | | NOTICE | I believe I can fly\n\n&gt;&gt;&gt; Output record with channel name\n2024/11/12 16:13:44 | App | NOTICE | I believe I can fly\n</code></pre> <p>As tou can see, when the log record have not chanel value, we would to not have the '|' character. To hide it, in this case, we need to use prefixes and suffixes placeholder.</p>"},{"location":"under-the-hood/formatter.html#using-prefix-and-suffix-of-placeholders","title":"Using prefix and suffix of placeholders","text":"<p>This formatting system uses regular expressions to handle placeholders within the log template, allowing them to be defined with prefixes and suffixes to modify their final output. </p> <p>Here\u2019s how a placeholder can be structured in the template:</p> <pre><code>{{ &lt;prefix/&gt; placeholder &lt;suffix/&gt; }}\n</code></pre> <p>The prefix text is added before the placeholder\u2019s value, and the suffixe text is added after the placeholder's value. And if a placeholder has no value, then the prefix and postfix are not displayed in the final output. </p> <p>For example, using this new line template with prefix and suffix on <code>{{ channel }}</code> placeholder. With this new line template, it will produce new output.</p> <pre><code>Set formatter = New VBAMonologger.FormatterLine\n\nformatter.templateLine = \"{{datetime}} | {{ &lt;Chanel:/&gt;channel&lt; | /&gt; }}{{ level_name }} | {{ message }}{{&lt; | ctx: /&gt; context}}{{&lt; | extra: /&gt; extra &lt; |/&gt; }}\"\n</code></pre> Result<pre><code>&gt;&gt;&gt; Output minimal log record \n2024/11/12 16:11:24 | NOTICE | I believe I can fly\n\n&gt;&gt;&gt; Output record with channel name\n2024/11/12 16:13:44 | Channel: App | NOTICE | I believe I can fly\n</code></pre> <p>Indeed, in this example, if the log entry does not contain a value for the <code>{{channel}}</code> placeholder, so the prefix <code>\"Channel:\"</code> and the suffix <code>\" | \"</code> associated will not appear in the final output. This behavior ensures that the log formatting remains clean and consistent, without unnecessary or empty placeholders cluttering the output when no value is provided for them.</p>"},{"location":"under-the-hood/formatter.html#show-or-hide-log-context-and-extra-metadata","title":"Show or hide log context and extra metadata","text":"<p>Logs can include context information (such as data specific to the execution of a process) and additional metadata. The <code>FormatterLine</code> class allows you to control the display of this data using the <code>showContext</code> and <code>showExtra</code> properties. </p> <p>By default, these properties are set to <code>True</code>, but you can hide them by setting the properties to <code>False</code>.</p> <pre><code>Set formatter = New VBAMonologger.FormatterLine\n\nformatter.showContext = False\nformatter.showExtra = False\n</code></pre>"},{"location":"under-the-hood/formatter.html#beautify-representation-of-log-context-and-extra-whitespace","title":"Beautify representation of log context and extra (whitespace)","text":"<p>Here's an example demonstrating how to beautify the representation of log context and extra data. The code below sets up a formatter to include newlines for log context and extra metadata, allowing for a more readable log output. This setup is particularly useful during the development phase for debugging, as it makes log outputs more readable and easier to analyze.</p> <pre><code>Set formatter = New VBAMonologger.FormatterLine\n\nformatter.setTemplateLineWithNewlineForContextAndExtra\nformatter.withWhitespace = True\nformatter.withAllowingInlineLineBreaks = True\nformatter.withPrefixToJsonLines = \" | \"\n\nDebug.Print \"&gt;&gt;&gt; Output log record with context and extra metadatas\"\nSet dummyRecord = dummyRecord.construct( _\n  \"I believe I can fly!\", _\n  VBAMonologger.LEVEL_NOTICE, _\n  \"App\", _\n  logContext, _\n  logExtra\n)\nDebug.Print formatter.format(dummyRecord)\n</code></pre> Result<pre><code>&gt;&gt;&gt; Output log record with context and extra metadatas\n[2024/11/12 16:13:44] App.NOTICE: I believe I can fly!\n | context: \n | { \n |    \"UserName\":\"v20100v\",\n |    \"UserID\":25508,\n |    \"Operation\":\"Create\"\n | } \n | extra: \n | {\n |     \"ExecutionTime\":\"3,9127 seconds\"\n | }\n</code></pre>"},{"location":"under-the-hood/formatter.html#add-colors-support-with-formatteransicoloredline","title":"Add colors support with FormatterANSIColoredLine","text":"<p>The main purpose of <code>FormatterANSIColoredLine</code> is to augment FormatterLine by adding color support. It formats log messages by converting them into text strings using the templating model provided by <code>FormatterLine</code>, while applying ANSI escape sequences for coloring the messages in terminals based on the log level. </p> <p>It enables the customization of log display by assigning specific colors to each log level through a configurable color palette.</p> <p></p>"},{"location":"under-the-hood/formatter.html#not-through-inheritance-but-by-composing-with-formatterline","title":"Not through inheritance, but by composing with FormatterLine","text":"<p>As VBA does not support inheritance, the <code>FormatterANSIColoredLine</code> class is composed of an instance of <code>FormatterLine</code>, granting access to the same methods. It also includes a <code>colorScheme</code> dictionary to specify the colors.</p> <pre><code>classDiagram\n    direction TB\n\n    class FormatterANSIColoredLine {\n        &lt;&lt;Class&gt;&gt;\n        +Function construct(Optional paramTemplateLine As String) As FormatterInterface\n        +Property Get templateLine() As String\n        +Property Let templateLine(ByVal newTemplateLine As String)\n        +Property Get colorScheme() As Scripting.Dictionary\n        +Property Set colorScheme(ByVal newColorScheme As Scripting.Dictionary)\n        +Property showContext As Boolean\n        +Property showExtra As Boolean\n        +Property withWhitespace as Boolean\n        +Property withAllowingInlineLineBreaks as Boolean\n\n        +Function setTemplateLineWithNewlineForContextAndExtra() as void\n        +Function getDefaultColorScheme() As Scripting.Dictionary\n        +Function getTrafficLightColorScheme() As Scripting.Dictionary\n        +Function getANSIEscapeSequenceColorOfLogLevel(levelName As String) As String\n        +Function getANSIEscapeSequenceColorReset() As String\n        +Function format(ByRef paramLogRecord As LogRecordInterface) As Variant\n        +Function formatBatch(ByRef records() As LogRecordInterface) As Variant\n        +Function toString() As String\n        -FormatterLine pFormatterLine\n        -Scripting.Dictionary pColorScheme\n    }\n\n    class FormatterInterface {\n        &lt;&lt;Interface&gt;&gt;\n    }\n\n    class StringableInterface {\n        &lt;&lt;Interface&gt;&gt;\n    }\n\n    class FormatterLine {\n        &lt;&lt;Class&gt;&gt;\n    }\n\n    FormatterLine ..|&gt; FormatterInterface : Implements\n    FormatterANSIColoredLine ..|&gt; FormatterInterface : Implements\n    FormatterANSIColoredLine ..|&gt; StringableInterface : Implements\n    FormatterANSIColoredLine o-- FormatterLine : Contains\n    FormatterLine ..|&gt; StringableInterface : Implements</code></pre> <p>The use of this formatter is similar to that of <code>FormatterLine</code>. You can change the line template, show or hide log context and extra pre-processors metadata.</p> <pre><code>Dim formatterWithColor As VBAMonologger.formatterANSIColoredLine\nSet formatterWithColor = New VBAMonologger.formatterANSIColoredLine\nformatterWithColor.showContext = false\nformatterWithColor.showExtra = false\nDebug.Print formatterWithColor.toString\n\nDebug.Print \"=== Output record minimal ===\"\nDim record As VBAMonologger.LogRecord\nSet record = New VBAMonologger.LogRecord\nSet record = record.construct( _\n    \"I believe I can fly\", _\n    VBAMonologger.LEVEL_INFO _\n)\nDebug.Print formatterWithColor.format(record) &amp; vbCrLf\n\nDebug.Print \"=== Output by using FormatBatch on records collection ===\"\nDim records() As VBAMonologger.LogRecordInterface\nReDim records(1 To 8)\nrecords = randomLogRecordsForEachLevel\nDebug.Print formatterWithColor.formatBatch(records) &amp; vbCrLf\n</code></pre> Result<pre><code>[VBAMonologger.Formatter.FormatterAnsiColoredLine]\n| Template line: [{{ datetime }}] {{ channel &lt;./&gt;}}{{ level_name }}: {{ message }}{{&lt; | ctx=/&gt; context }}{{&lt; | extra=/&gt; extra }}\n| Show context: False\n| Show extra: False\n| Color sheme:\n| {\n|   \"DEBUG\": \"\\u001B[37m\",\n|   \"INFO\": \"\\u001B[32m\",\n|   \"NOTICE\": \"\\u001B[36m\",\n|   \"WARNING\": \"\\u001B[33m\",\n|   \"ERROR\": \"\\u001B[31m\",\n|   \"CRITICAL\": \"\\u001B[31;4m\",\n|   \"ALERT\": \"\\u001B[37;41m\",\n|   \"EMERGENCY\": \"\\u001B[41;37;5m\",\n|   \"RESET\": \"\\u001B[0m\"\n| }\n\n=== Output record minimal ===\n\u001b[32m[2024/11/12 17:50:17] INFO: I believe I can fly\u001b[0m\n\n=== Output by using FormatBatch on records collection ===\n\u001b[41;37;5m[2024/11/12 17:50:17] App.Authentification.EMERGENCY: A critical failure occurred in the application for {Operation} process\u001b[0m\n\u001b[37;41m[2024/11/12 17:50:17] App.Authentification.ALERT: Action required for process {Operation} failure.\u001b[0m\n\u001b[31;4m[2024/11/12 17:50:17] App.Authentification.CRITICAL: System is in an unstable state. Unable to authenticate {UserId}.\u001b[0m\n\u001b[31m[2024/11/12 17:50:17] App.Authentification.ERROR: An error occurred when the user {UserId} try to {Operation} the file {file}.\u001b[0m\n\u001b[33m[2024/11/12 17:50:17] App.Authentification.WARNING: The user {UserId} does not exist. Unable to perform '{Operation}' user file.\u001b[0m\n\u001b[36m[2024/11/12 17:50:17] App.Authentification.NOTICE: Process completed successfully with minor issues for {UserId}.\u001b[0m\n\u001b[32m[2024/11/12 17:50:17] App.Authentification.INFO: User {UserId} has logged in successfully.\u001b[0m\n\u001b[37m[2024/11/12 17:50:17] App.Authentification.DEBUG: Authentification function call for user {UserId}.\u001b[0m\n</code></pre> <p>As you can see, each log entry is properly wrapped in an ANSI escape sequence to apply color. However, the VBA console does not support displaying these escape ANSI sequences, so you would need to view these messages in a compatible console that supports ANSI color codes. You should see the following result:</p> <p></p>"},{"location":"under-the-hood/formatter.html#customizing-the-color-scheme","title":"Customizing the color scheme","text":"<p>To change the color scheme, all you need to do is create a dictionary and assign a color to each log level. This allows you to customize the colors for different severity levels, such as \"DEBUG,\" \"INFO,\" \"ERROR,\" and so on. The dictionary maps each log level to a specific ANSI color code, enabling you to control the appearance of each type of log message when displayed in a terminal or compatible environment.</p> <p>By updating the dictionary, you can easily modify the color scheme without altering the underlying code logic, providing flexibility in how the logs are visually represented.</p> <pre><code>Public Function getCustomColorScheme() As Scripting.Dictionary\n   Dim colorScheme As Scripting.Dictionary\n   Set colorScheme = New Scripting.Dictionary\n   colorScheme.Add \"DEBUG\", Chr$(27) &amp; \"[2;32m\" ' FG Green faint\n   colorScheme.Add \"INFO\", Chr$(27) &amp; \"[32m\" ' FG Green normal\n   colorScheme.Add \"NOTICE\", Chr$(27) &amp; \"[1;32m\" ' FG Green bright\n   colorScheme.Add \"WARNING\", Chr$(27) &amp; \"[2;33m\" ' FG Yellow faint\n   colorScheme.Add \"ERROR\", Chr$(27) &amp; \"[33m\" ' FG Yellow normal\n   colorScheme.Add \"CRITICAL\", Chr$(27) &amp; \"[31m\" ' FG Red normal\n   colorScheme.Add \"ALERT\", Chr$(27) &amp; \"[1;31m\" ' FG Red bright\n   colorScheme.Add \"EMERGENCY\", Chr$(27) &amp; \"[41;37;5m\"\n   colorScheme.Add \"RESET\", Chr$(27) &amp; \"[0m\"\n\n   Set getCustomColorScheme = colorScheme\nEnd Function\n\nDim formatterAnsiColoredLine As VBAMonologger.formatterAnsiColoredLine\nSet formatterAnsiColoredLine = New VBAMonologger.formatterAnsiColoredLine\nSet formatterAnsiColoredLine.colorScheme = getCustomColorScheme\nformatterAnsiColoredLine.showContext = False\nformatterAnsiColoredLine.showExtra = False\n</code></pre> <p></p> <p>To get an ANSI sequence color, you can also use the <code>VBAMonologger.ANSI</code> module. It provides various ANSI escape sequences to colorize your text output. You can combine styles using the \"&amp;\" operator. For example to get a bright red background with white foreground text, use the following: <code>VBAMonologger.ANSI.BG_BRIGHT_RED &amp; VBAMonologger.ANSI.WHITE</code>.</p> <p>Here\u2019s an example of how to create a custom color scheme:</p> <pre><code>Public Function getCustomColorScheme() As Scripting.Dictionary\n   Dim colorScheme As Scripting.Dictionary\n   Set colorScheme = New Scripting.Dictionary\n   colorScheme.Add \"DEBUG\", VBAMonologger.ANSI.WHITE\n   colorScheme.Add \"INFO\", VBAMonologger.ANSI.GREEN\n   colorScheme.Add \"NOTICE\", VBAMonologger.ANSI.CYAN\n   colorScheme.Add \"WARNING\", VBAMonologger.ANSI.YELLOW\n   colorScheme.Add \"ERROR\", VBAMonologger.ANSI.BRIGHT_RED\n   colorScheme.Add \"CRITICAL\", VBAMonologger.ANSI.RED\n   colorScheme.Add \"ALERT\", _ \n      VBAMonologger.ANSI.BG_BRIGHT_RED &amp; VBAMonologger.ANSI.WHITE\n   colorScheme.Add \"EMERGENCY\", _ \n      VBAMonologger.ANSI.BG_RED &amp; VBAMonologger.ANSI.WHITE\n\n   Set getCustomColorScheme = colorScheme\nEnd Function\n</code></pre>"},{"location":"under-the-hood/formatter.html#available-ansi-sequence-colors","title":"Available ANSI sequence colors","text":"<p>The <code>VBAMonologger.ANSI</code> module provides a variety of ANSI escape sequences for styling text. </p> <p>Here\u2019s a list of the available sequences:</p> Function Name Description <code>RESET</code> Reset all attributes <code>BOLD</code> Bold text style <code>WEAK</code> Weak (dim) text style <code>UNDERLINE</code> Underline text <code>BLINK</code> Blink text <code>REVERSE</code> Reverse foreground and background colors <code>HIDDEN</code> Hidden text <code>BLACK</code> Black foreground color <code>RED</code> Red foreground color <code>GREEN</code> Green foreground color <code>YELLOW</code> Yellow foreground color <code>BLUE</code> Blue foreground color <code>MAGENTA</code> Magenta foreground color <code>CYAN</code> Cyan foreground color <code>WHITE</code> White foreground color <code>BRIGHT_BLACK</code> Bright black foreground color <code>BRIGHT_RED</code> Bright red foreground color <code>BRIGHT_GREEN</code> Bright green foreground color <code>BRIGHT_YELLOW</code> Bright yellow foreground color <code>BRIGHT_BLUE</code> Bright blue foreground color <code>BRIGHT_MAGENTA</code> Bright magenta foreground color <code>BRIGHT_CYAN</code> Bright cyan foreground color <code>BRIGHT_WHITE</code> Bright white foreground color <code>BG_BLACK</code> Black background color <code>BG_RED</code> Red background color <code>BG_GREEN</code> Green background color <code>BG_YELLOW</code> Yellow background color <code>BG_BLUE</code> Blue background color <code>BG_MAGENTA</code> Magenta background color <code>BG_CYAN</code> Cyan background color <code>BG_WHITE</code> White background color <code>BG_BRIGHT_BLACK</code> Bright black background color <code>BG_BRIGHT_RED</code> Bright red background color <code>BG_BRIGHT_GREEN</code> Bright green background color <code>BG_BRIGHT_YELLOW</code> Bright yellow background color <code>BG_BRIGHT_BLUE</code> Bright blue background color <code>BG_BRIGHT_MAGENTA</code> Bright magenta background color <code>BG_BRIGHT_CYAN</code> Bright cyan background color <code>BG_BRIGHT_WHITE</code> Bright white background color <p>Enjoy the ... colors!</p>"},{"location":"under-the-hood/handler.html","title":"Handler","text":""},{"location":"under-the-hood/handler.html#concept","title":"Concept","text":"<p>A log handler is the key component responsible for processing each log entry. When a log message is generated, it is not simply recorded; it must be directed to a location where it can be viewed and used. This is where the handler comes in, determining where and how each log entry will be sent or saved. </p> <p>A log handler is responsible for directing log messages to specific outputs, such as file, console or database , and based on the log level and other configuration settings like bubble propagation.</p>"},{"location":"under-the-hood/handler.html#modeling","title":"Modeling","text":"<p>The interface <code>VBAMonologger.Handler.HandlerInterface</code> defines the standard behavior that all handler implementations must follow. </p> <p>It provides a standardized, modular way to add various logging handlers without needing to change client code. By implementing this interface, different handlers can easily be added to support new output targets or custom logging behavior as needed. Handlers can be configured independently with custom formatters, levels, and bubbling behavior, offering fine-grained control over how and where logs are managed.</p> <pre><code>classDiagram\n    direction TB\n\n    class HandlerInterface {\n        &lt;&lt;interface&gt;&gt;\n        + level VBAMonologger.LOG_LEVELS\n        + FormatterInterface formatter\n        + Boolean bubble\n\n        + Boolean isHandling(LogRecordInterface LogRecord)\n        + Boolean handle(LogRecordInterface LogRecord)\n        + Boolean handleBatch(LogRecordInterface[] logRecords)\n        + void closeHandler()\n    }\n\n    class LOG_LEVELS {\n        &lt;&lt;Enum&gt;&gt;\n    }\n\n    class FormatterInterface {\n        &lt;&lt;Interface&gt;&gt;\n        +Function format(ByRef record As LogRecordInterface) As Variant\n        +Function formatBatch(ByRef records() As LogRecordInterface) As Variant\n    }\n\n\n    %% Implementations and relationships\n    HandlerConsoleVBA ..|&gt; HandlerInterface: Implements\n    HandlerConsole ..|&gt; HandlerInterface: Implements\n    HandlerFile ..|&gt; HandlerInterface: Implements\n\n    HandlerInterface --&gt; FormatterInterface : Has (property pFormatter)\n    HandlerInterface --&gt; LOG_LEVELS : Uses</code></pre> <p>This interface specifies the necessary properties and methods to control how and where log records are processed, and it provides the following members.</p> <p><pre><code>Public level As VBAMonologger.LOG_LEVELS\n</code></pre> Determines the current log level of handler. This property sets the minimum log level required for the handler to process a log entry. Only messages at or above this level are handled, allowing for filtering of log messages based on severity (e.g., DEBUG, INFO, ERROR).</p> <p><pre><code>Public Property bubble As Boolean\n</code></pre> Determines whether, or not, the log record should \"bubble up\" to other handlers in the stack after being processed by the current handler.</p> <p>When you have multiple handlers in the stack of your logger, and want a specific handler to be the only one processing certain log levels or messages, you have to set bubble to false for that handler. This is useful if you need specific messages to go only to a certain location.  - If bubble is set to <code>true</code> (the default), the log record will be processed by the current handler and continue to \"bubble up\" to other handlers in the stack. This allows multiple handlers to process the same log message.  - If bubble is set to <code>false</code>, the log record will stop propagating after being processed by the current handler. This essentially \"catches\" the record, preventing it from being handled by other handlers in the stack.</p> <p><pre><code>Public Property formatter As FormatterInterface\n</code></pre> Specifies the formatter associated with the handler, defining how each log record will be structured and formatted before output. This allows for flexible formatting (e.g., plain text, JSON) based on the formatter assigned to the handler.</p> <p><pre><code>Function isHandling(ByRef logRecord As LogRecordInterface) As Boolean\n</code></pre> Provides a way for handlers to filter log messages. This ensures that a handler only processes messages that are relevant to it, which can improve performance and reduce unnecessary processing. It returns true if the handler is capable of processing the  log message and false if the handler should not process the log message. This function evaluates if the handler is set to process the given log record based on the log level and other criteria. It returns <code>True</code> if the handler should handle the record, or <code>False</code> if it should be ignored.</p> <p><pre><code>Function handle(ByRef logRecord As LogRecordInterface) As Boolean\n</code></pre> All records may be passed to this method, and the handler should discard those that it does not want to handle. The return value of this function controls the bubbling process of the handler stack. Unless the bubbling is interrupted (by returning true), the Logger class will keep on calling further handlers in the stack with a given log record. If the handler can process the record (based on <code>isHandling</code>), it outputs the formatted log message to its designated destination (e.g., console, file). It returns a Boolean value to control the record's propagation through additional handlers, based on the <code>bubble</code> property.</p> <p><pre><code>Function handleBatch(ByRef logRecords() As LogRecordInterface) As Boolean\n</code></pre> This method handles an array of log records at once, processing each record in sequence. It provides an efficient way to process bulk log entries, making it ideal for scenarios where multiple messages need to be logged simultaneously.</p> <p><pre><code>Sub closeHandler()\n</code></pre> This method releases any resources or open connections the handler may use (e.g., closing file handles or flushing data). It ensures a proper shutdown of the logging cycle and frees up resources when logging is complete.</p>"},{"location":"under-the-hood/handler.html#handlerconsolevba","title":"HandlerConsoleVBA","text":"<p>The <code>VBAMonologger.Handler.HandlerConsoleVBA</code> class is responsible for directing log messages into the VBA Console (i.e. the Immediate window in Excel). </p> <pre><code>classDiagram\n    direction TB\n\n    class HandlerConsoleVBA {\n        - LogLevel pLevel\n        - FormatterInterface pFormatter\n        - Boolean pBubble\n\n        + construct(Boolean paramBubble, LOG_LEVELS paramLevel): HandlerInterface\n        + Boolean isHandling(LogRecordInterface LogRecord)\n        + Boolean handle(LogRecordInterface LogRecord)\n        + Boolean handleBatch(LogRecordInterface[] logRecords)\n        + void closeHandler()\n        + String toString() \n    }\n\n    class HandlerInterface {\n        &lt;&lt;Interface&gt;&gt;\n    }\n\n    class StringableInterface {\n        &lt;&lt;Interface&gt;&gt;\n    }    \n\n    %% Implementations and relationships\n    HandlerConsoleVBA ..|&gt; StringableInterface : Implements\n    HandlerConsoleVBA ..|&gt; HandlerInterface: Implements\n    HandlerInterface --&gt; FormatterInterface : Has (property pFormatter)\n    HandlerInterface --&gt; LOG_LEVELS : Uses</code></pre>"},{"location":"under-the-hood/handler.html#creating-a-new-handlerconsolevba","title":"Creating a new <code>HandlerConsoleVBA</code>","text":"<p>Below is an example of how to create an instance of handler console VBA.</p> <pre><code>Dim handlerConsole As VBAMonologger.HandlerInterface\nSet handlerConsole = New VBAMonologger.HandlerConsoleVBA\nDebug.Print handlerConsole.toString\n\nDebug.Print \"=== Handle a log record with HandlerConsoleVBA ===\"\nDim record As VBAMonologger.LogRecord\nSet record = New VBAMonologger.LogRecord\nSet record = record.construct( _\n    \"Process completed successfully with minor issues for user.\", _\n    VBAMonologger.LEVEL_INFO, _\n    \"App\"\n)\n\nDim isHandling As Boolean\nisHandling = handlerConsole.isHandling(record)\nDebug.Print \"&gt;&gt;&gt; Result of handlerConsole.isHandling(record): \" &amp; isHandling\nDebug.Print \"&gt;&gt;&gt; Result of handlerConsole.handle(record): \"\nhandlerConsole.handle record\n</code></pre> Result<pre><code>[VBAMonologger.Handler.HandlerConsoleVBA]\n | level: DEBUG\n | bubble: true\n\n=== Handle a log record with HandlerConsoleVBA ===\n&gt;&gt;&gt; Result of handler.isHandling(dummyRecord): True\n&gt;&gt;&gt; Result of handler.handle(dummyRecord): \n[2024/11/13 10:42:03] App.INFO: Process completed successfully with minor issues for user.\n</code></pre>"},{"location":"under-the-hood/handler.html#changing-the-formatter-of-handler","title":"Changing the formatter of handler","text":"<p>The <code>HandlerConsoleVBA</code> class leverages a <code>FormatterInterface</code> to define the structure and appearance of each log entry, ensuring a specific, consistent format that makes log messages easier to read and understand in the console. </p> <p>By default, <code>HandlerConsoleVBA</code> uses the <code>FormatterLine</code> implementation of the <code>FormatterInterface</code>, which outputs each log entry in a simple, line-based format optimized for console viewing. Additionally, <code>HandlerConsoleVBA</code> is set with a default log level of <code>DEBUG</code>.</p> <pre><code>Dim handler As VBAMonologger.HandlerConsoleVBA\nSet handler = New VBAMonologger.HandlerConsoleVBA\n\nDim formatterLine As VBAMonologger.FormatterLine\nSet formatterLine = New VBAMonologger.FormatterLine\nformatterLine.showContext = False\nformatterLine.showExtra = False\nSet handler.formatter = formatterLine\n\nDebug.Print \"=== Handle a collection of log records with default log level \"DEBUG\" ===\"\nDebug.Print handler.toString\nDebug.Print \"&gt;&gt;&gt; Result of handler.handleBatch(records): \"\nhandler.handleBatch randomLogRecordsForEachLevel\n\nDebug.Print \"=== Change level of handler to CRITICAL ===\"\nhandler.level.currentLogLevel = VBAMonologger.LOG_LEVELS.LEVEL_CRITICAL\nDebug.Print handler.toString\nDebug.Print \"&gt;&gt;&gt; Result of handler.handleBatch(records): \"\nhandler.handleBatch randomLogRecordsForEachLevel\n</code></pre> Result<pre><code>=== Handle a collection of log records with default log level \"DEBUG\" ===\n\n[VBAMonologger.Handler.HandlerConsoleVBA]\n | level: DEBUG\n | bubble: true\n\n &gt;&gt;&gt; Result of handler.handleBatch(records): \n[2024/11/13 10:42:03] App.Authentification.EMERGENCY: A critical failure occurred in the application for {Operation} process\n[2024/11/13 10:42:03] App.Authentification.ALERT: Action required for process {Operation} failure.\n[2024/11/13 10:42:03] App.Authentification.CRITICAL: System is in an unstable state. Unable to authenticate {UserId}.\n[2024/11/13 10:42:03] App.Authentification.ERROR: An error occurred when the user {UserId} try to {Operation} the file {file}. \n[2024/11/13 10:42:03] App.Authentification.WARNING: The user {UserId} does not exist. Unable to perform '{Operation}' user file. \n[2024/11/13 10:42:03] App.Authentification.NOTICE: Process completed successfully with minor issues for {UserId}. \n[2024/11/13 10:42:03] App.Authentification.INFO: User {UserId} has logged in successfully.\n[2024/11/13 10:42:03] App.Authentification.DEBUG: Authentification function call for user {UserId}. \n\n=== Change level of handler to \"CRITICAL\" === \n\n[VBAMonologger.Handler.HandlerConsoleVBA]\n | level: CRITICAL\n | bubble: true\n\n&gt;&gt;&gt; Result of handler.handleBatch(records):\n[2024/11/13 10:42:03] App.Authentification.EMERGENCY: A critical failure occurred in the application for {Operation} process\n[2024/11/13 10:42:03] App.Authentification.ALERT: Action required for process {Operation} failure.\n[2024/11/13 10:42:03] App.Authentification.CRITICAL: System is in an unstable state. Unable to authenticate {UserId}.\n</code></pre> <p>In the example above, the <code>HandlerConsoleVBA</code> object is first instantiated and configured to display logs in the VBA console using a custom formatter, where the <code>showContext</code> and <code>showExtra</code> options are disabled. This means that contextual and additional information will be excluded from the output.</p> <p>Next, <code>handlerConsole</code> processes a set of log messages covering all severity levels (from DEBUG to EMERGENCY). Since the default log level is set to <code>DEBUG</code>, all log entries are displayed in the console.</p> <p>In the second part of the example, the log level of <code>handlerConsole</code> is changed to <code>CRITICAL</code>, meaning that only messages with a <code>CRITICAL</code> severity level or higher (such as ALERT and EMERGENCY) will be displayed. As a result, entries with lower severity levels (ERROR, WARNING, etc.) are excluded and do not appear in the output.</p>"},{"location":"under-the-hood/handler.html#handlerfile","title":"HandlerFile","text":"<p>The <code>VBAMonologger.Handler.HandlerFile</code> class is responsible for managing and logging messages to a file. This class implements the <code>VBAMonologger.Handler.HandlerInterface</code>, which specifies the methods and properties that a logging handler must provide.</p> <pre><code>classDiagram\n    direction TB\n\n    class HandlerFile {\n        - FormatterInterface pFormatter\n        - Boolean pBubble\n        - logLevel pLevel\n        - String pLogFileName\n        - String pLogFileFolder\n        - String pLogfilePath\n        - Variant pFolderCreated\n        - Scripting.FileSystemObject pFileSystemObject\n        - Object ADODB.Stream pLogFileStream\n        - Boolean pLockFile\n\n        + construct(...): HandlerInterface\n        + Property Get formatter() As FormatterInterface\n        + Property Set formatter(ByRef newFormatter As FormatterInterface)\n        + Property Get bubble() As Boolean\n        + Property Let bubble(ByVal value As Boolean)\n        + Property Get level() As logLevel\n        + Property Set level(ByVal newLogLevel As logLevel)\n        + Function isHandling(LogRecordInterface paramLogRecord) As Boolean\n        + Function handle(LogRecordInterface paramLogRecord) As Boolean\n        + Function handleBatch(LogRecordInterface[] paramLogRecords) As Boolean\n        + Sub closeHandler()\n        + Property Get logFileName() As String\n        + Property Let logFileName(ByVal newLogFileName As String)\n        + Property Get logFileFolder() As String\n        + Property Let logFileFolder(ByVal newLogFileFolder As String)\n        + Property Get logFilePath() As String\n        + Function toString() As String\n    }\n\n    class HandlerInterface {\n        &lt;&lt;Interface&gt;&gt;\n    }\n\n    class StringableInterface {\n        &lt;&lt;Interface&gt;&gt;\n    }\n\n    %% Implementations and relationships\n    HandlerFile ..|&gt; StringableInterface : Implements\n    HandlerFile ..|&gt; HandlerInterface: Implements\n    HandlerInterface --&gt; FormatterInterface : Has (property pFormatter)\n    HandlerInterface --&gt; LOG_LEVELS : Uses\n    HandlerFile --&gt; FileSystemObject : Uses\n    HandlerFile --&gt; ADODB-Stream : Uses</code></pre> <p>We have several members that are used to configure and manage the handler log file:</p> Property Description <code>logFileName</code> The name of the log file. This name can be customized. <code>logFileFolder</code> To retrieve and set the folder where the log file will be stored. <code>logFilePath</code> To get the full path to the log file, built by concatenation of  <code>logFileFolder</code> with <code>logFileName</code>. <code>pFolderCreated</code> (Private) To showing whether the log folder has been successfully created. <code>pFileSystemObject</code> (Private) An object of <code>FileSystemObject</code> used to interact with the file system (for creating folders and manipulating files). <code>pLogFileStream</code> (Private) An object of <code>ADODB.Stream</code> used to manage the stream for writing to the log file in UTF-8. <code>pLockFile</code> (Private) An indicator for locking the file, used to control concurrent access to the log file."},{"location":"under-the-hood/handler.html#creating-a-new-handlerfile","title":"Creating a new <code>HandlerFile</code>","text":"<p>Here\u2019s how to create a new instance of <code>HandlerFile</code> and handle log records.</p> <pre><code>Dim handlerFile As VBAMonologger.HandlerFile\nSet handlerFile = New VBAMonologger.HandlerFile\nDebug.Print handlerFile.toString\n\n' Change the default formatter to a ANSI colored line formatter \nDim formatterAnsiColoredLine As VBAMonologger.formatterAnsiColoredLine\nSet formatterAnsiColoredLine = New VBAMonologger.formatterAnsiColoredLine\nSet handlerFile.formatter = formatterAnsiColoredLine\n\n' Change the default log level of handler to `ERROR`\nhandlerFile.level.currentLogLevel = VBAMonologger.LOG_LEVELS.LEVEL_ERROR\n\n' Handle a log record with HandlerFile\nDim record As VBAMonologger.LogRecord\nSet record = New VBAMonologger.LogRecord\nSet record = record.construct( _\n    \"Process completed successfully with minor issues for user.\", _\n    VBAMonologger.LEVEL_INFO, _\n    \"App\"\n)\nDim isHandling As Boolean\nDim resultHandle As Boolean\nisHandling = handlerFile.isHandling(record)\nresultHandle = handlerFile.handle(record)\n\n' Close the handler   \nhandlerFile.closeHandler\n</code></pre> Result<pre><code>[VBAMonologger.Handler.HandlerFile]\n | logFileName: vbalogfile_2024-11-13.log\n | logfilePath: D:\\VBAMonologger\\var\\log\\vbalogfile_2024-11-13.log\n | logFileFolder: D:\\VBAMonologger\\var\\log\n</code></pre> <p>You can open the logfile to view the entry records written in it.</p>"},{"location":"under-the-hood/handler.html#supporting-utf-8","title":"Supporting UTF-8","text":"<p>In VBA, a text file can be created using the native <code>Open</code> and <code>Print #</code> methods or the <code>FileSystemObject</code>. The <code>Open</code> method allows you to open a file for writing, and if the file doesn\u2019t exist, it will be created. However, by default, text is written using ANSI encoding, which is based on the system's language and regional settings (often Windows-1252 for English or French systems). This encoding does not support non-Latin characters and may cause issues when the file is opened on systems with different encodings.</p> <p>To ensure compatibility with special and multilingual characters in this <code>HandlerFile</code>, the UTF-8 encoding is preferred. This can be achieved by using the <code>ADODB.Stream</code> object, which allows you to specify the desired encoding when writing to the file. The <code>ADODB.Stream</code> object is designed to handle data streams, making it ideal for both text and binary file operations. By using UTF-8, the log file can store data in multiple languages and special characters without any loss or corruption of information, unlike with other encodings.</p> <p>Can I change the encoding?</p> <p>No! For now, there is no plan to provide an option to change the default UTF-8 encoding.</p>"},{"location":"under-the-hood/handler.html#modifying-the-name-and-destination-of-the-log-file","title":"Modifying the name and destination of the log file","text":"<p>Here\u2019s how you can modify the log file and its destination folder.</p> <pre><code>Dim handlerFile As VBAMonologger.HandlerFile\nSet handlerFile = New VBAMonologger.HandlerFile\n\nDebug.Print \"=== Change the logfile name ===\"\nhandlerFile.logFileName = \"Amazing-log-file-name.log\"\nDebug.Print handlerFile.toString\n\nDebug.Print \"=== Change the logfile folder ===\"\nhandlerFile.logFileFolder = VBA.Environ$(\"USERPROFILE\") &amp; \"\\VBAMonologger\\logs\"\nDebug.Print handlerFile.toString\n\nDebug.Print \"=== Initialize handlerFile with custom logfile name and folder ===\"\nSet handlerFile = handlerFile.construct( _\n  paramLogFileName:=\"vba-log-file___\" &amp; format(Now, \"yyyy-mm-dd\") &amp; \".log\", _\n  paramLogFileFolder:=ThisWorkbook.Path &amp; \"\\var\\log\" _\n)\nDebug.Print handlerFile.toString\n</code></pre> Result<pre><code>=== Change the logfile name ===\n[VBAMonologger.Handler.HandlerFile]\n | logFileName: Amazing-log-file-name.log\n | logfilePath: D:\\VBAMonologger\\src\\var\\log\\Amazing-log-file-name.log\n | logFileFolder: D:\\VBAMonologger\\src\\var\\log\n\n=== Change the logfile folder ===\n[VBAMonologger.Handler.HandlerFile]\n | logFileName: Amazing-log-file-name.log\n | logfilePath: C:\\Users\\vblain\\VBAMonologger\\logs\\Amazing-log-file-name.log\n | logFileFolder: C:\\Users\\vblain\\VBAMonologger\\logs\n\n=== Initialize handlerFile with custom logfile name and folder ===\n[VBAMonologger.Handler.HandlerFile]\n | logFileName: vba-log-file___2024-11-13.log\n | logfilePath: D:\\VBAMonologger\\src\\var\\log\\vba-log-file___2024-11-13.log\n | logFileFolder: D:\\VBAMonologger\\src\\var\\log\n</code></pre>"},{"location":"under-the-hood/handler.html#handlerconsole","title":"HandlerConsole","text":"<p>The handler <code>VBAMonologger.HandlerConsole</code> streams log messages to the Windows console (cmd.exe) by employing an HTTP-based client/server architecture. </p> <p>The client sends log records as HTTP POST requests to the server. The server processes these requests and displays the log messages directly in the console output. This handler features a formatter that supports ANSI colors with <code>VBAMonologger.Formatter.FormatterANSIcoloredLine</code>.</p> <p></p> <pre><code>classDiagram\n    direction TB\n\n    class HandlerConsole {\n        - FormatterInterface pFormatter\n        - Boolean pBubble\n        - LogLevel pLogLevel\n        - LOG_LEVELS pLevel\n        - Scripting.FileSystemObject pFileSystemObject\n        - String pTempFolderPowershellPrograms\n        - String pPowershellProgramServerFilepath\n        - Object pWriterFileStream\n        - ConsoleWrapper pConsoleWrapper\n        - String pUrlServer\n        - Boolean pWithDebug\n        - Boolean pWithANSIColorSupport\n        - Boolean pWithNewlineForContextAndExtra\n        + String hostnameServer\n        + Integer portServer\n\n        + construct(...): HandlerInterface\n        + Property Get urlServer() As String\n        + Property Get withDebug() As Boolean\n        + Property Let withDebug(ByVal newValueForWithDebug As Boolean)\n        + Property Get withANSIColorSupport() As Boolean\n        + Property Let withANSIColorSupport(ByVal newValueForWithANSIColorSupport As Boolean)\n        + Property Get withNewlineForContextAndExtra() As Boolean\n        + Property Let withNewlineForContextAndExtra(ByVal newValueForWithNewlineForContextAndExtra As Boolean)\n        + Sub startServerLogsViewer(Optional paramVerbose As Boolean)\n        + Function isServerListening() As Boolean\n        + Sub sendRequest(paramMessage As String)\n        + Sub sendExitCommand()\n        + Sub closeHandler()\n        + Property Get formatter() As FormatterInterface\n        + Property Set formatter(ByRef newFormatter As FormatterInterface)\n        + Property Get bubble() As Boolean\n        + Property Let bubble(ByVal value As Boolean)\n        + Function isHandling(paramLogRecord As LogRecordInterface) As Boolean\n        + Function handle(paramLogRecord As LogRecordInterface) As Boolean\n        + Function handleBatch(paramLogRecords() As LogRecordInterface) As Boolean\n        + Property Get level() As LOG_LEVELS\n        + Property Let level(ByVal newLevel As LOG_LEVELS)\n        + Function toString() As String\n    }\n\n    class HandlerInterface {\n        &lt;&lt;Interface&gt;&gt;\n    }\n\n    %% Implementations and relationships\n    HandlerConsole ..|&gt; HandlerInterface: Implements\n    HandlerInterface --&gt; FormatterInterface : Has (property pFormatter)\n    HandlerInterface --&gt; LOG_LEVELS : Uses\n    HandlerConsole --&gt; FileSystemObject : Uses\n    HandlerConsole --&gt; ADODB-Stream : Uses\n    HandlerConsole --&gt; ConsoleWrapper : Uses</code></pre>"},{"location":"under-the-hood/handler.html#vbamonologger-http-client","title":"VBAMonologger HTTP client","text":"<p>The client implementation resides in the <code>sendRequest</code> method of the <code>HandlerConsole</code> class. </p> <p>This VBA client is initialized using <code>CreateObject(\"MSXML2.XMLHTTP\")</code>, which is a common method for making HTTP requests in VBA.</p> VBAMonologger.Handler.HandlerConsole.sendRequest()<pre><code>Public Sub sendRequest(paramMessage As String)\n    Dim http As Object\n    Dim message As String\n\n    ' Try to connect to VBAMonologger HTTP server logs viewer\n    If withDebug Then Debug.Print \"[DEBUG] HandlerConsole::sendRequest | Try to send request to VBAMonologger server on: \" &amp; urlServer\n    Set http = CreateObject(\"MSXML2.XMLHTTP\")\n    http.Open \"POST\", urlServer, False ' False = Request should be handled synchronously\n\n    ' Send request to server\n    http.setRequestHeader \"Content-Type\", \"application/x-www-form-urlencoded\"\n    http.setRequestHeader \"User-Agent\", \"VBAMonologger VBA client\"\n    http.setRequestHeader \"Cache-Control\", \"no-cache\"\n    http.setRequestHeader \"Connection\", \"keep-alive\"\n    http.send paramMessage\n    If withDebug Then Debug.Print \"[DEBUG] HandlerConsole::sendRequest | The request was sent to the server with body message: \"\"\" &amp; paramMessage &amp; \"\"\"\"\n\n    ' Received and read the response's server\n    Dim responseBody As String\n    Dim responseCode As Integer\n    responseBody = http.responseText\n    responseCode = http.Status\n    If withDebug Then\n        Select Case responseCode\n            Case 200\n                Debug.Print \"[DEBUG] HandlerConsole::sendRequest | The server has responded successfully (200 - OK): \" &amp; responseBody\n            Case 404\n                Debug.Print \"[DEBUG] HandlerConsole::sendRequest | The server responded an error (404 - resource not found).\"\n            Case Else\n                Debug.Print \"[DEBUG] HandlerConsole::sendRequest | Unexpected server response with HTTP code: \" &amp; responseCode &amp; \" and body response: \" &amp; responseBody\n        End Select\n    End If\n\n    If responseCode &lt;&gt; 200 Then\n        Err.Raise vbObjectError + 1000, \"VBAMonologger.Handler.HandlerConsole::sendRequest\", \"Unexpected server response with HTTP code: \" &amp; responseCode &amp; \" and body response: \" &amp; responseBody\n    End If\nEnd Sub\n</code></pre> <p>The handler does nothing more than sending an HTTP request with the formatted log record into message to the VBAMonologger server logs viewer, in order to display it in console.</p> VBAMonologger.Handler.HandlerConsole.handle()<pre><code>Private Function HandlerInterface_handle(paramLogRecord As LogRecordInterface) As Boolean\n    Dim result As Boolean\n    If Not HandlerInterface_isHandling(paramLogRecord) Then\n        result = False\n    Else\n        Dim formattedMessage As String\n        formattedMessage = VBA.CStr$(pformatter.format(paramLogRecord))\n        formattedMessage = VBA.Replace$(formattedMessage, \"\\n\", vbCrLf)\n\n        ' Call VBAMonologger client logs sender in order to send a request to VBAMonologger server logs viewer (i.e. send a message to show into server's output)\n        Call sendRequest(formattedMessage)\n        result = True\n    End If\n    result = (True = pBubble)\n\n    HandlerInterface_handle = result\nEnd Function\n</code></pre>"},{"location":"under-the-hood/handler.html#vbamonologger-http-server-logs-viewer","title":"VBAMonologger HTTP server logs viewer","text":""},{"location":"under-the-hood/handler.html#testing-the-server-manually-in-powershell","title":"Testing the server manually in powershell","text":"<p>For those interested in testing the PowerShell server, you can easily start it manually with a simple command. Notes, that you can modify the server's hostname and port using the corresponding parameters.</p> <pre><code>cd .\\src\\powershell\\\npowershell .\\VBAMonologgerServerLogsViewer.ps1 -Verbose\n</code></pre> <p></p> <p>In the same folder, you can find a PowerShell client for testing purposes, which allows you to send requests to the VBAmonologger server. In reality, this powerShell client is not used within the library. The real client implementation resides in the <code>sendRequest</code> method of the <code>HandlerConsole</code> class. This VBA client is initialized using <code>CreateObject(\"MSXML2.XMLHTTP\")</code>, which is a common method for making HTTP requests in VBA.</p> <pre><code>cd .\\src\\powershell\\\n.\\VBAMonologgerDummyClient.ps1 -message \"I believe I can fly!\"\n.\\VBAMonologgerDummyClient.ps1 -message \"I believe I can touch the sky!\"\n.\\VBAMonologgerDummyClient.ps1 -message \"exit\"\n</code></pre> <p>To view the full code of VBA Monologger server logs viewer, please visit the following here:  VBAMonologgerServerLogsViewer.ps1.</p>"},{"location":"under-the-hood/handler.html#create-an-http-server-in-powershell","title":"Create an HTTP server in powershell","text":"<p>Just use the <code>System.Net.HttpListener</code> library, as fallows.</p> <pre><code>function _createHTTPServer\n{\n    try\n    {\n        $server = [System.Net.HttpListener]::new()\n        $server.Prefixes.Add(\n            \"http://\" + $Global:hostname + \":\" + $Global:port + \"/\"\n        )\n        $server.Start()\n        [console]::WriteLine(\n            \"[DEBUG] Server is listening on : &lt;h&gt;\"\"http://\" + \n            $Global:hostname + \":\" + \n            $Global:port + \"\"\"&lt;/h&gt;\"\n        )\n    }\n    catch\n    {\n        [console]::WriteLine(\"[ERROR] Creation of server encountered an critical error. It is possible that the HTTP server's port: \" + $Global:port + \", is already in use by another application or process.`n$_\")\n        Exit 1\n    }\n\n    return $server\n}\n</code></pre> <p>To stop the server, we add this function.</p> <pre><code>function _stopHTTPServer\n{\n    param ([Parameter(Mandatory = $true)] [System.Net.HttpListener] $server)\n    $server.Stop()\n    [console]::WriteLine(\"`nServer shutdown, bye bye !\")\n}\n</code></pre> <p>And to start the server we add this function. This is a minimal first version of VBAMonologger server logs viewer with basic processing. It simply displays the client's response. Nothing more, nothing less.</p> <pre><code>function _startHTTPServer\n{\n    param ([Parameter(Mandatory = $true)] [System.Net.HttpListener] $server)\n\n    $continue = $true\n    while ($continue)\n    {\n        [console]::WriteLine((\"Waiting for new client connection...\")\n        $context = $server.GetContext()\n        $request = $context.Request\n        $response = $context.Response\n        [console]::WriteLine((\"Connection established by a new client.\")\n\n        # Read client request (with support encoding UTF-8)\n        $reader = [System.IO.StreamReader]::new(\n            $request.InputStream, [System.Text.Encoding]::UTF8\n        )\n        $message = $reader.ReadToEnd()\n        [console]::WriteLine((\"Request received from the new client.\")\n        [console]::WriteLine($message)\n\n        # Preapre server reponse\n        $responseString = \"Request received! \" + $message\n\n        # Add custom headers \n        $response.Headers.Add(\"Server\", \"VBAMonologger HTTP Server\")\n        $response.Headers.Add(\"X-Powered-By\", \"PowerShell 5\")\n        $response.Headers.Add(\n            \"X-Request-Received\",\n            (Get-Date).ToString(\"yyyy-MM-ddTHH:mm:ss\")\n        )\n\n        # Send server response (with support encoding UTF-8)\n        $response.StatusCode = 200\n        $response.ContentType = \"text/plain; charset=utf-8\"\n        $buffer = [System.Text.Encoding]::UTF8.GetBytes($responseString)\n        $response.OutputStream.Write($buffer, 0, $buffer.Length)\n        $response.Close()\n    }\n}\n</code></pre>"},{"location":"under-the-hood/handler.html#enhanced-server-processing-requests-client","title":"Enhanced server processing request's client","text":"<p>Our PowerShell-based HTTP server has been designed to handle client requests in order to show the body of the request into console. With this feature we can show a log record given by a client. To enhance the server's capabilities, we've added a feature that allows it to identify and process specific stop commands. This ensures the server can shut down smoothly. Upon receiving a stop command, the server acknowledges it, optionally waits for a designated time, and then stops further processing. </p> <p>If a client sends a message containing <code>exit</code>, <code>stop</code>, or <code>stop-server</code> in the body, the server will initiate its shutdown process. This feature ensures that the server acknowledges the stop command, processes it, and halts further operations smoothly. Additionally, it's possible to delay the shutdown process by a specified number of milliseconds using the -wait option. For example, including <code>-wait 2000</code> in the command will delay the shutdown by 2000 milliseconds.</p> <p>This is achieved through the following code snippet:</p> <pre><code>$message = $reader.ReadToEnd()\n\n# Process client's request\n$command = $message.ToLower()\n\n# Check if `-wait` option  is given in request's command\n$waitTime = 0\nif ($command -like '*-wait*')\n{\n    $parts = $command.Split()\n    $mainCommand = $parts[0]\n    $waitForIndex = [Array]::IndexOf($parts, '-wait')\n    if ($waitForIndex -ne -1 -and $waitForIndex + 1 -lt $parts.Length)\n    {\n        $waitTime = [int]$parts[$waitForIndex + 1]\n    }\n}\nelse\n{\n    $mainCommand = $command\n}\n\nif ($mainCommand -eq 'exit' -or $mainCommand -eq 'stop' -or $mainCommand -eq 'stop-server')\n{\n    if ($waitTime -gt 0)\n    {\n        _consoleDebug(\"Stop command received, with a wait time for its execution of : &lt;h&gt;\"\"\" + $waitTime + \"\"\"&lt;/h&gt;.\")\n        Start-Sleep -Milliseconds $waitTime\n    } else {\n        _consoleDebug(\"Stop command received.\")\n    }\n\n    $responseString = \"Stop command received and executed by the server.\"\n    $continue = $false\n}\nelse\n{\n    $responseString = \"Request received! \" + $message\n    # Simply output message's request into console, in order to show log record\n    [console]::WriteLine($message)\n}\n</code></pre>"},{"location":"under-the-hood/handler.html#enhanced-server-console-outputs","title":"Enhanced server console outputs","text":"<p>The provided PowerShell function enhances the console output with functions to handle and style messages. </p> <p>These helper functions allow for dynamic styling of console messages, changing text colors and background colors based on the type of message. Debug messages are shown in gray, errors in red, and warnings in dark yellow.</p> <pre><code>function _consoleDebug()\n{\n    param ([Parameter(Mandatory = $true)] [string]$message)\n    if ($VerbosePreference -eq \"Continue\")\n    {\n        _consoleLog -message $message -type \"debug\"\n    }\n}\n\nfunction _consoleError()\n{\n    param ([Parameter(Mandatory = $true)] [string]$message)\n    _consoleLog -message $message -type \"error\"\n}\n\nfunction _consoleWarning()\n{\n    param ([Parameter(Mandatory = $true)] [string]$message)\n    _consoleLog -message $message -type \"warning\"\n}\n</code></pre> <p>The <code>_consoleLog</code> function centralizes the logging process, adjusting the style based on the message type (debug, error, warning, etc.). Other functions like <code>_consoleDebug</code>, <code>_consoleError</code>, and <code>_consoleWarning</code> call <code>_consoleLog</code> with appropriate parameters to handle different log types.</p> <pre><code>function _consoleLog\n{\n    param (\n        [Parameter(Mandatory = $true)] [string] $message,\n        [Parameter(Mandatory = $true)] [string] $type\n    )\n\n    # Save current colors\n    $currentForegroundColor = [console]::ForegroundColor\n    $currentBackgroundColor = [console]::BackgroundColor\n    $currentHighlightForegroundColor = $Global:highlightForegroundColor\n    $currentHighlightBackgroundColor = $Global:highlightBackgroundColor\n\n    # Prepare output message\n    $type = $type.ToLower()\n    switch ($type)\n    {\n        \"debug\" {\n            if ($VerbosePreference -eq \"Continue\")\n            {\n                [console]::ForegroundColor = \"DarkGray\"\n                $message = $Global:prefixConsoleOutput + \" [{0}] {1}\" -f (Get-Date).ToString(), $message\n            }\n        }\n        \"error\" {\n            [console]::ForegroundColor = \"Red\"\n            $Global:highlightForegroundColor = \"Yellow\"\n            $Global:highlightBackgroundColor = \"DarkRed\"\n            $message = $Global:prefixConsoleOutput + \" [{0}] [ERROR] {1}\" -f (Get-Date).ToString(), $message\n        }\n        \"warning\" {\n            [console]::ForegroundColor = \"DarkYellow\"\n            $Global:highlightBackgroundColor = \"DarkMagenta\"\n            $message = $Global:prefixConsoleOutput + \" [{0}] [WARNING] {1}\" -f (Get-Date).ToString(), $message\n        }\n        default {\n            [console]::ForegroundColor = \"White\"\n            $message = $Global:prefixConsoleOutput + \" [{0}] {1}\" -f (Get-Date).ToString(), $message\n        }\n    }\n    _consoleWriteStyles($message)\n\n    # Restore previous colors\n    [console]::ForegroundColor = $currentForegroundColor\n    [console]::BackgroundColor = $currentBackgroundColor\n    $Global:highlightForegroundColor = $currentHighlightForegroundColor\n    $Global:highlightBackgroundColor = $currentHighlightBackgroundColor\n}\n</code></pre> <p>The <code>_consoleWriteStyles</code> function is designed to style console messages with custom colors. It looks for tags in the message that specify styling, such as changing text and background colors. When it finds these tags, it applies the specified styles to the text within the tags. If no tags are found, it writes the message with default console colors. The function ensures that the console's colors are restored to their original settings after applying the styles.</p> <p>This function provides a feature of replacing tags <code>{h}{/h}</code> with according style <code>&lt;style=...&gt;...&lt;/s&gt;</code> in the message. This allows it to apply default styles to highlighted text within these tags.</p> <pre><code>function _consoleWriteStyles\n{\n    param (\n        [Parameter(Mandatory = $true)] [string]$message\n    )\n\n    # Search tag {h}{/h} and replace it by its default styles\n    $message = $message -replace '&lt;h&gt;(.*?)&lt;/h&gt;', \"&lt;style=`\"foregroundColor:$highlightForegroundColor; backgroundColor:$highlightBackgroundColor;`\"&gt;`${1}`&lt;/s&gt;\"\n\n    # Regex used to capture styles\n    $regex = '&lt;style=\"([^\"]+)\"&gt;(.+?)&lt;/s&gt;'\n    $regexStyleColor = '(?:foregroundColor:(?&lt;fgColor&gt;[^;]+);?)?(?:\\s*backgroundColor:(?&lt;bgColor&gt;[^;]+);?)?'\n\n    $lastIndex = 0\n    $matchesStyles = [regex]::Matches($message, $regex)\n    if ($matchesStyles.Count -eq 0)\n    {\n        # If no matches, write text with default style\n        [console]::WriteLine($message)\n    }\n    else\n    {\n        # Saved current console colors\n        $currentForegroundColor = [console]::ForegroundColor\n        $currentBackgroundColor = [console]::BackgroundColor\n\n        foreach ($match in $matchesStyles)\n        {\n            $captureStyles = $match.Groups[1].Value\n            $captureTextStyled = $match.Groups[2].Value\n            $startIndex = $match.Index\n\n            # Write text with default style before style bloc\n            if ($startIndex - $lastIndex -gt 0)\n            {\n                $textBefore = $message.Substring($lastIndex, $startIndex - $lastIndex)\n                [console]::Write($textBefore)\n            }\n\n            # Capture styles properties colors\n            $styleMatch = [regex]::Match($captureStyles, $regexStyleColor)\n            $foregroundColor = if ($styleMatch.Groups[\"fgColor\"].Value)\n            {\n                $styleMatch.Groups[\"fgColor\"].Value\n            }\n            else\n            {\n                $currentForegroundColor\n            }\n            $backgroundColor = if ($styleMatch.Groups[\"bgColor\"].Value)\n            {\n                $styleMatch.Groups[\"bgColor\"].Value\n            }\n            else\n            {\n                $currentBackgroundColor\n            }\n\n            # Write capture text with colors\n            [console]::ForegroundColor = $foregroundColor\n            [console]::BackgroundColor = $backgroundColor\n            [console]::Write($captureTextStyled)\n            [console]::ForegroundColor = $currentForegroundColor\n            [console]::BackgroundColor = $currentBackgroundColor\n\n            # Update position after regexp match\n            $lastIndex = $startIndex + $match.Length\n        }\n\n        # Write remaining text after the last matches with default style\n        if ($lastIndex -lt $message.Length)\n        {\n            $remainingText = $message.Substring($lastIndex)\n            [console]::Write($remainingText)\n        }\n        [console]::WriteLine(\"\")\n    }\n}\n</code></pre> <p>So you can enhance the visibility of your log messages in the console output by utilizing specific styling tags. One such tag is <code>&lt;h&gt;&lt;/h&gt;</code>, which is used to highlight critical parts of the message, making them stand out. For example:</p> <pre><code>_consoleError(\"Creation of server encountered an &lt;h&gt;critical error&lt;/h&gt;. It is possible that the HTTP server's port: &lt;h&gt;\" + $Global:port + \"&lt;/h&gt;, is already in use by another application or process.`n$_\")\n</code></pre> <p>Will produces this output:</p> <p></p>"},{"location":"under-the-hood/handler.html#embedding-powershell-server-code-into-a-vba-library","title":"Embedding PowerShell server code into a VBA library","text":"<p>In VBAMonologger library, a notable feature is the integration of PowerShell code directly within the xlam (Excel Add-In) library. The PowerShell script that manages the server is embedded within the library itself. </p> <p>Here\u2019s how it works:</p> <ul> <li>The function <code>getPowershellCodeServerLogsViewer</code> contains the PowerShell code. This function constructs the script as a string, including headers and the main body of the code, which is designed to set up an HTTP server for displaying log messages sent by clients. </li> </ul> <pre><code>Private Function getPowershellCodeServerLogsViewer() As String\n     Dim code As String\n     code = \"\"\n\n     ' Header code source file\n     code = code &amp; \"# ------------------------------------- #\" &amp; vbCrLf\n     code = code &amp; \"#                                       #\" &amp; vbCrLf\n     code = code &amp; \"#    VBA Monologger                     #\" &amp; vbCrLf\n     code = code &amp; \"#    Copyright \u00a9 2024, 6i software      #\" &amp; vbCrLf\n     code = code &amp; \"#                                       #\" &amp; vbCrLf\n     code = code &amp; \"# ------------------------------------- #\" &amp; vbCrLf\n     code = code &amp; \"#\" &amp; vbCrLf\n\n     (...)\n\n     getPowershellCodeServerLogsViewer = code\nEnd Function\n</code></pre> <ul> <li>During the initialization of an instance of <code>HandlerConsole</code>, various configurations are set, including the creation of a temporary folder (with the <code>createPowershellTempfolder</code> method), and the creation of the powershell file (with the <code>createPowershellFileVBAMonologgerServer</code> method).</li> </ul> <pre><code>Private Sub Class_Initialize()\n    ' Configuration and initialization steps.\n    pTempFolderPowershellPrograms = Environ(\"TEMP\") &amp; \"\\VBAMonologger\\powershell\"\n    pPowershellProgramServerFilepath = pTempFolderPowershellPrograms &amp; \"\\VBAMonologgerHTTPServerLogsViewer.ps1\"\n    createPowershellTempfolder\n    createPowershellFileVBAMonologgerServer\nEnd Sub\n</code></pre> <ul> <li>The PowerShell file is created using the <code>pWriterFileStream</code> member, which is an ADODB Stream object. This object is available in Microsoft ActiveX Data Objects and is used to write the file in UTF-8 encoding.</li> </ul> <pre><code>Private Sub createPowershellFileVBAMonologgerServer()\n    Dim serverFile As Object\n    Dim lines() As String\n    Dim i As Long\n\n    ' Create file code source, only if does not exist\n    If Not pFileSystemObject.FileExists(pPowershellProgramServerFilepath) Then\n    ' Get powershell program of 'VBAMonologger server logs viewer'\n    Dim serverPowershellCode As String\n    serverPowershellCode = getPowershellCodeServerLogsViewer()\n\n    ' Ignore errors if logfile does not exist\n    On Error Resume Next\n    pWriterFileStream.Open\n    pWriterFileStream.LoadFromFile pPowershellProgramServerFilepath\n    On Error GoTo 0\n\n    ' Split code source when a \\n (newline) is encountered.\n    lines = Split(serverPowershellCode, \"\\n\")\n    ' Write each line code, adding an empty line for each \\n\n    For i = LBound(lines) To UBound(lines)\n        pWriterFileStream.WriteText lines(i), 1 ' 1: Writes a text string and a line separator character to stream\n    Next i\n    pWriterFileStream.SaveToFile pPowershellProgramServerFilepath, 2 ' 2: Overwrite file\n\n    ' Final check\n    If Not pFileSystemObject.FileExists(pPowershellProgramServerFilepath) Then\n        Err.Raise vbObjectError + 1000, \"VBAMonologger.Handler.HandlerConsole::createPowershellFileVBAMonologgerServer\", \"Failed to create the powershell file: \" &amp; pPowershellProgramServerFilepath\n     EndIf\nEnd Sub\n</code></pre> <ul> <li>Upon initialization, the library ensures that the necessary directories are created and the PowerShell script is written to the specified file path. This setup allows the VBAMonologger server logs viewer to run seamlessly, providing real-time log monitoring capabilities.</li> </ul>"},{"location":"under-the-hood/handler.html#how-to-start-the-vbamonologger-server-logs-viewer-from-vba","title":"How to start the VBAMonologger server logs viewer from VBA","text":"<p>To do it, we use a console wrapper (`VBAMonologger.Utils.ConsoleWrapper``)</p> <pre><code>Public Sub startServerLogsViewer( _\n    Optional ByVal paramVerbose As Boolean = False _\n)\n    ' Check if the file exists using FileSystemObject\n    If Not pFileSystemObject.FileExists(pPowershellProgramServerFilepath) Then\n        Err.Raise vbObjectError + 1000, \"HandlerConsole::startServerLogsViewer\", \"Powershell program file for *VBAMonologger HTTP server logs viewer* was not found: \" &amp; pPowershellProgramServerFilepath\n        Exit Sub\n    End If\n\n    Dim shellCommand As String\n    shellCommand = \"cmd.exe /K\"\n    shellCommand = shellCommand &amp; \" powershell.exe -File \"\"\" &amp; pPowershellProgramServerFilepath &amp; \"\"\"\"\n    shellCommand = shellCommand &amp; \" -port\" &amp; \" \" &amp; portServer\n    shellCommand = shellCommand &amp; \" -hostname\" &amp; \" \" &amp; hostnameServer\n    shellCommand = shellCommand &amp; \" -titleConsole \"\"\" &amp; TITLE_CONSOLE_WINDOW &amp; \"\"\"\"\n\n    If paramVerbose = True Then\n        shellCommand = shellCommand &amp; \" -Verbose\"\n        pConsoleWrapper.withDebug = True\n    End If\n\n    ' If console (cmd.exe) with the title \"TitleConsoleWindow\" already exist... we do nothing with createConsole!\n    pConsoleWrapper.createConsole shellCommand\n\n    ' Check server status\n    If isServerListening() Then\n        If withDebug Then Debug.Print \"[DEBUG] HandlerConsole::startServerLogsViewer | The VBAMonologger server is listening on: \" &amp; urlServer\n    Else\n        Err.Raise vbObjectError + 1000, \"HandlerConsole::startServerLogsViewer\", \"Unable to start the VBAMonologger server. It's not listening on: \" &amp; urlServer\n    End If\nEnd Sub\n</code></pre>"},{"location":"under-the-hood/log-record.html","title":"Log record","text":""},{"location":"under-the-hood/log-record.html#concept","title":"Concept","text":"<p>A log record refers to an entry that captures specific information about an event or action occurring within an application. A log entry includes several key elements:</p> <ul> <li>Date and Time: To track the exact date and time the log entry was created.</li> <li>Message: The main text describing the event, e.g. \"User attempted to log in.\".</li> <li>Severity level: The importance or severity level of the log entry, e.g. <code>INFO</code>, <code>WARNING</code> or <code>ERROR</code>. See Log severity levels)</li> <li>Channel: A way to categorize or segment logs based on their source or purpose.</li> <li>Log Context: Additional relevant information about the event, e.g. user ID.</li> <li>Log Extra: Optional, useful details, e.g. memory or CPU usage.</li> </ul> <p>In addition to the basic log message, you may sometimes want to include extra information that helps to provide more context for the event being logged. This could include things like the username of the person triggering the event, a session ID, or any other piece of data that can assist in understanding the log entry better. </p> <p>For adding complementary data to a log record, you have two options : <code>context</code> and <code>extra</code>.</p> <ul> <li>The <code>context</code> is used to add information directly related to the logged event, such as details about an error or an ongoing operation.</li> <li>Meanwhile, <code>extra</code> is reserved for additional metadata, often generated automatically or added by pre-processors, providing a global context.</li> </ul> <p>Whether it's the <code>context</code> option or the <code>extra</code> option, they are essentially VBA dictionaries, where you can store key-value pairs that hold relevant information. When you create a log entry, this context can be attached and will be incorporated into the log output, providing deeper insights into the logged event. This feature is a great way to enrich your log entries with important details and provide better traceability and understanding of your application's behavior.</p>"},{"location":"under-the-hood/log-record.html#modeling","title":"Modeling","text":"<p>A log record is described in the interface <code>VBAMonologger.Log.LogRecordInterface</code> and implemented in the module class <code>VBAMonologger.Log.LogRecord</code>.</p> <pre><code>classDiagram\n    direction TB\n\n    class LogRecordInterface {\n        &lt;&lt;Interface&gt;&gt;\n        +Property Get dateTime() As Date\n        +Property Get message() As String\n        +Property Let message(ByVal value As String)\n        +Property Get channel() As String\n        +Property Get level() As VBAMonologger.logLevel\n        +Property Get context() As Variant\n        +Property Get extra() As Variant\n    }\n\n    class LogRecord {\n        +Function construct(...) As LogRecordInterface\n        -Date pDateTime\n        -String pMessage\n        -String pChannel\n        -LogLevel pLevel\n        -Scripting.Dictionary pContext\n        -Scripting.Dictionary pExtra\n\n        +Property Get dateTime() As Date\n        +Property Get message() As String\n        +Property Let message(ByVal value As String)\n        +Property Get channel() As String\n        +Property Get level() As VBAMonologger.logLevel\n        +Property Get context() As Variant\n        +Property Get extra() As Variant\n        +Function toString() As String\n    }\n\n    LogRecord ..|&gt; LogRecordInterface : Implements\n    LogRecord ..|&gt; StringableInterface : Implements    \n    LogRecord --&gt; LogLevel : Has (property pLevel)</code></pre>"},{"location":"under-the-hood/log-record.html#usages","title":"Usages","text":""},{"location":"under-the-hood/log-record.html#creating-a-logrecord","title":"Creating a LogRecord","text":"<p>To create a log record, just use its constructor like this.</p> <p><pre><code>Dim record As VBAMonologger.LogRecord\n\nSet record = New VBAMonologger.LogRecord\nSet record = record.construct( _\n  \"I believe I can fly\", _\n  VBAMonologger.LEVEL_EMERGENCY _\n)\n\nDebug.Print record.toString\n</code></pre> Result<pre><code>[VBAMonologger.Log.LogRecord]\n| dateTime: 04/11/2024 18:41:32\n| message: I believe I can fly\n| channel: \n| level: EMERGENCY (level value=600)\n| context: {}\n| extra: {}\n</code></pre></p> <p>Typing a <code>LogRecord</code></p> <p>If you use the typing <code>Dim record As VBAMonologger.LogRecordInterface</code>, you will not have access to the <code>toString()</code> method. In this case, you will only have access to the properties exposed by the interface.</p>"},{"location":"under-the-hood/log-record.html#attaching-a-log-record-to-a-channel","title":"Attaching a log record to a channel","text":"<p>Log channels identify the source of log entries in large applications, simplifying filtering and searching within shared log files. To attach a log record with a channel, simply specify it as follows in its constructor.</p> <p><pre><code>Set record = record.construct( _\n  \"I believe I can fly\", _\n  VBAMonologger.LEVEL_INFO, _\n  \"App\" _\n)\n\nDebug.Print record.toString\n</code></pre> Result<pre><code>[VBAMonologger.Log.LogRecord]\n| dateTime: 04/11/2024 18:41:32\n| message: I believe I can fly\n| channel: App\n| level: EMERGENCY (level value=600)\n| context: {}\n| extra: {}\n</code></pre></p>"},{"location":"under-the-hood/log-record.html#adding-log-context-and-extra-metadata-from-pre-processors","title":"Adding log context and extra metadata from pre-processors","text":"<p>In addition to the basic log message, you may sometimes want to add extra information to provide more context. With a log record, this can be done using either the log context or the log extra. </p> <p>The log context allows you to attach additional data that provides more detailed information about the event, such as user information, session details, or request data. On the other hand, the log extra metadata can be used to include supplementary details processed by custom pre-processors (see Pre-processor), enabling a more dynamic and flexible logging structure for advanced debugging or analysis.</p> <p><pre><code>' Set a dummy log context\nDim logContext As Scripting.Dictionary\nSet logContext = New Scripting.Dictionary    \nlogContext.Add \"UserName\", \"v20100v\"\nlogContext.Add \"UserID\", 92763\nlogContext.Add \"Operation\", \"Create\"\n\n' Set a dummy extra metadata from pre-processors\nDim logExtra As Scripting.Dictionary\nSet logExtra = New Scripting.Dictionary\nlogExtra.Add \"ExecutionTime\", \" 9,2227 seconds\"\n\nSet record = record.construct( _\n  \"A critical failure occurred for {Operation} process\", _\n  VBAMonologger.LEVEL_EMERGENCY, _\n  \"Authentification\", _\n  logContext,\n  logExtra\n)\nDebug.Print record.toString\n</code></pre> Result<pre><code>[VBAMonologger.Log.LogRecord]\n| dateTime: 04/11/2024 18:41:32\n| message: A critical failure occurred for {Operation} process\n| channel: Authentification\n| level: EMERGENCY (level value=600)\n| context: {\"UserName\":\"v20100v\",\"UserID\":92763,\"Operation\":\"Create\"}\n| extra: {\"ExecutionTime\":\"9,2227 seconds\"}\n</code></pre></p>"},{"location":"under-the-hood/log-record.html#randomize-a-log-record-for-testing","title":"Randomize a log record for testing","text":"<p>Here's an example to generate random log records with varying levels of severity, log context, and extra metadata. It's designed to simulate realistic log entries for testing and debugging purposes in the VBA Monologger system.</p> <pre><code>'@Description(\"To generate a random LogRecord\")\nPublic Function randomLogRecord(level As Variant) As VBAMonologger.LogRecord\n    Dim record As VBAMonologger.LogRecord\n    Set record = New VBAMonologger.LogRecord\n\n    Dim logMessage As String\n    Select Case level\n        Case VBAMonologger.LEVEL_EMERGENCY\n            logMessage = \"A critical failure occurred in the application for {Operation} process\"\n        Case VBAMonologger.LEVEL_ALERT\n            logMessage = \"Action required for process {Operation} failure.\"\n        Case VBAMonologger.LEVEL_CRITICAL\n            logMessage = \"System is in an unstable state. Unable to authenticate {UserId}.\"\n        Case VBAMonologger.LEVEL_ERROR\n            logMessage = \"An error occurred when the user {UserId} try to {Operation} the file {file}.\"\n        Case VBAMonologger.LEVEL_WARNING\n            logMessage = \"The user {UserId} does not exist. Unable to perform '{Operation}' user file.\"\n        Case VBAMonologger.LEVEL_NOTICE\n            logMessage = \"Process completed successfully with minor issues for {UserId}.\"\n        Case VBAMonologger.LEVEL_INFO\n            logMessage = \"User {UserId} has logged in successfully.\"\n        Case VBAMonologger.LEVEL_DEBUG\n            logMessage = \"Authentification function call for user {UserId}.\"\n    End Select\n\n    Set randomLogRecord = record.construct( _\n        logMessage, _\n        level, _\n        \"App.Authentification\", _\n        randomLogContext, _\n        randomLogExtra _\n    )\nEnd Function\n\n'@Description(\"To generate a random log extra\")\nPublic Function randomLogExtra() As Scripting.Dictionary\n    Dim dummyExtra As Scripting.Dictionary\n    Set dummyExtra = New Scripting.Dictionary\n    Randomize\n    dummyExtra.Add \"ExecutionTime\", Round((Rnd * 10), 4) &amp; \" seconds\"\n\n    Set randomLogExtra = dummyExtra\nEnd Function\n\n'@Description(\"To generate a random log context\")\nPublic Function randomLogContext() As Scripting.Dictionary\n    Dim dummyContext As Scripting.Dictionary\n    Set dummyContext = New Scripting.Dictionary\n\n    Dim availableUserName As Variant\n    Dim availableOperations As Variant\n    availableUserName = Array(\"Bob\", \"Alice\", \"Arthur\", \"v20100v\", \"CaravanPalace\", \"2o8o\")\n    availableOperations = Array(\"Create\", \"Read\", \"Update\", \"Delete\")\n\n    Randomize\n    dummyContext.Add \"UserName\", availableUserName(Int(Rnd * (UBound(availableUserName) + 1)))\n    dummyContext.Add \"UserID\", Int((99999 - 10000 + 1) * Rnd + 10000)\n    dummyContext.Add \"Operation\", availableOperations(Int(Rnd * (UBound(availableOperations) + 1)))\n\n    Set randomLogContext = dummyContext\nEnd Function\n</code></pre> <p>If you want a more complex log context with a nested dictionary, you can use the randomize students function below.</p> <pre><code>'@Description(\"To generate dummy nested dictionnary.\")\nPublic Function randomStudents( _ \n    Optional count As Integer = 3 _ \n) As Scripting.Dictionary\n    Dim students As Scripting.Dictionary\n    Set students = New Scripting.Dictionary\n\n    Dim fullNames As Variant\n    fullNames = Array( _\n        \"Isaac Newton\", \"Albert Einstein\", \"Galileo Galilei\", \"Pythagore\", _\n        \"Alan Turing\", \"Stephen Hawking\", \"Marie Curie\", \"Leonhard Euler\", _\n        \"Pierre de Fermat\", \"Bernhard Riemann\", \"Nicolaus Copernicus\", _\n        \"Niels Bohr\", \"Paul Dirac\", \"Felix Klein\", \"Nikola Tesla\", _\n        \"Werner Heisenberg\", \"Max Planck\", \"Richard Feynman\", _\n        \"James Clerk Maxwell\", \"Joseph-Louis Lagrange\", \"\u00c9variste Galois\", _\n        \"Charles Darwin\", \"Gregor Mendel\", \"James Watson\", \"Francis Crick\", _\n        \"Richard Dawkins\", \"Jane Goodall\", \"Carl Sagan\", _\n        \"Pierre-Simon Laplace\" _\n    )\n    Dim randomFullName As String\n    randomFullName = fullNames(Int(Rnd * (UBound(fullNames) + 1)))\n\n    Dim subjects As Variant\n    subjects = Array( _\n        \"Physics\", \"Mathematics\", \"Biology\", \"Chemistry\", \"Astrophysics\", _\n        \"Computer Science\", \"Statistics\", \"Genetics\", \"Quantum Mechanics\", _\n        \"Thermodynamics\", \"Ecology\", \"Evolutionary Biology\", \"Organic\", _\n        \"Linear Algebra\", \"Calculus\", \"Differential Equations\", \"Biochemistry\" _\n    )\n\n    Dim student As Scripting.Dictionary\n    Dim grades As Scripting.Dictionary\n    Dim selectedSubjects As Collection\n    Dim randomNumberSubjects As Integer\n    Dim randomSubject As String\n\n    Dim i As Integer\n    Dim j As Integer\n    For i = 1 To count\n        Set student = New Scripting.Dictionary\n        student.Add \"FullName\", randomFullName\n        student.Add \"Age\", Int((55 - 18 + 1) * Rnd + 16)\n\n        Set grades = New Scripting.Dictionary\n        ' Add random number of subjects (2 at 6)\n        randomNumberSubjects = Int((6 - 2 + 1) * Rnd + 1)\n        Set selectedSubjects = New Collection\n        Do While selectedSubjects.count &lt; randomNumberSubjects\n            randomSubject = subjects(Int(Rnd * (UBound(subjects) + 1)))\n            ' Avoid if subject is already selected\n            On Error Resume Next\n            selectedSubjects.Add randomSubject, randomSubject\n            On Error GoTo 0\n        Loop\n        For j = 1 To selectedSubjects.count\n            Dim subjectName As String\n            subjectName = selectedSubjects(j)\n            grades.Add subjectName, Int((100 - 11 + 1) * Rnd + 50)\n        Next j\n\n        student.Add \"Grades\", grades\n        students.Add \"Student\" &amp; i, student\n    Next i\n\n    Set randomStudents = students\nEnd Function\n</code></pre>"},{"location":"under-the-hood/log-severity-levels.html","title":"Log severity levels","text":""},{"location":"under-the-hood/log-severity-levels.html#concept","title":"Concept","text":"<p>The severity levels indicate the severity of each event, from the most trivial to the most catastrophic, and allow administrators or developers to filter messages based on their importance.</p> <p>VBA Monologger manages 8 standard severity levels to classify the importance of log messages, following the PSR-3 standard, which is itself based on RFC 5424, the standard defined by the IETF (Internet Engineering Task Force) to specify the format of messages for the Syslog protocol, which is used for transmitting logs over IP networks.</p> Log level Description <code>EMERGENCY</code> Indicates a very critical situation that requires immediate attention. (system crash, data corruption) <code>ALERT</code> Signals an alert condition. (critical disk space running out) <code>CRITICAL</code> Indicates a serious error. (database connection failure, server downtime) <code>ERROR</code> Represents an error in the system. (failed to save user data, unexpected exception) <code>WARNING</code> A warning about a potential problem. (use a deprecated function used, low memory warning) <code>NOTICE</code> Important notifications that are not urgent. (user login successful, configuration change detected) <code>INFO</code> General information about the normal operation. (system startup, data processed successfully) <code>TRACE</code> Detailed information for debugging. (variable values during loop iteration, execution details). Notes, that the 'debug' method exposes presents in PSR-3 is rename into 'trace' in order to be compatible in VBA ecosystem."},{"location":"under-the-hood/log-severity-levels.html#modeling","title":"Modeling","text":"<p>To model log entry severity levels in compliance with the RFC 5424 standard, we use a simple enumeration within the <code>VBAMonologger.Log.LogLevel</code> class.</p> <pre><code>classDiagram\n    direction TB\n\n    class LogLevel {\n        +LOG_LEVELS currentLogLevel\n\n        +Function construct(paramLogLevel As LOG_LEVELS) : LogLevel\n        +Property Get name() As String\n\n        +Sub fromName(name As String)\n        +Function toRFC5424Level() As Long\n        +Function toPsrLogLevel() As String\n        +Function includes(level As LogLevel) As Boolean\n        +Function isHigherThan(level As LogLevel) As Boolean\n        +Function isLowerThan(level As LogLevel) As Boolean\n        +Function toString() As String\n    }\n\n    class LOG_LEVELS {\n        &lt;&lt;Enum&gt;&gt;\n        +LEVEL_EMERGENCY : 600\n        +LEVEL_ALERT : 550\n        +LEVEL_CRITICAL : 500\n        +LEVEL_ERROR : 400\n        +LEVEL_WARNING : 300\n        +LEVEL_NOTICE : 250\n        +LEVEL_INFO : 200\n        +LEVEL_DEBUG : 100\n    }    \n\n    class StringableInterface {\n        &lt;&lt;Interface&gt;&gt;\n        +Function toString() As String\n    }\n\n    %% Relations\n    LogLevel --&gt; LOG_LEVELS : Uses\n    LogLevel ..|&gt; StringableInterface : Implements</code></pre>"},{"location":"under-the-hood/log-severity-levels.html#emulate-a-constructor-in-vba","title":"Emulate a constructor in VBA","text":"<p>A class constructor, regardless of the language, is a special method that is automatically called when an instance of a class is created, typically using the <code>New</code> keyword. The primary purpose of a constructor is to initialize the members of the class object when it is instantiated, allowing default values to be set, resources to be allocated, or other necessary actions to be taken so that the object is ready to use.</p> <p>But in VBA, there is no really constructor, but there is an alternative to emulate one.</p> <p>To illustrate, consider the property <code>currentLogLevel</code>. Its default value is set in the special VBA procedure <code>Class_Initialize()</code>. This procedure is automatically called whenever a class instance is created, i.e., whenever an object is instantiated with the <code>New</code> keyword. Below is the code that initializes this default value.</p> <pre><code>Public currentLogLevel As LOG_LEVELS\n\nPrivate Sub Class_Initialize()\n    currentLogLevel = LOG_LEVELS.LEVEL_DEBUG\nEnd Sub\n</code></pre> <p>However, the <code>Class_Initialize()</code> procedure neither accepts parameters nor returns values, which limits its function as a true constructor. To emulate a constructor with parameters, an additional function named <code>construct</code> (by convention) is added. Note that this function is not automatically executed upon instantiation. You need to call it manually.</p> <pre><code>Public Function construct(paramLogLevel As LOG_LEVELS)\n    currentLogLevel = paramLogLevel\n\n    ' Fluent\n    Set construct = Me\nEnd Function\n</code></pre>"},{"location":"under-the-hood/log-severity-levels.html#instantiate-an-instance-of-loglevel","title":"Instantiate an instance of LogLevel","text":"<p>Here's an example of how to instantiate an instance of <code>LogLevel</code> and use its construct method to set the log level.</p> <p><pre><code>Sub Usecases_LogLevel()    \n  Dim level As VBAMonologger.logLevel\n\n  Debug.Print \"# Instantiate the class\"\n  Set level = New VBAMonologger.logLevel\n  Debug.Print level.toString\n\n  Debug.Print \"# Call the constructor (with 'INFO' level)\"\n  level.construct LEVEL_INFO\n  Debug.Print level.toString\nEnd Sub\n</code></pre> Result<pre><code># Instantiate the class\n[VBAMonologger.Log.LogLevel]\n | currentLogLevel: 100\n | name: 'DEBUG'\n\n# Call the constructor (with 'INFO' level)\n[VBAMonologger.Log.LogLevel]\n | currentLogLevel: 200\n | name: 'INFO'\n</code></pre></p>"},{"location":"under-the-hood/log-severity-levels.html#implement-stringableinterface-with-tostring-method-for-readable-object-representation","title":"Implement <code>StringableInterface</code> with <code>toString()</code> method for readable object representation","text":"<p>The <code>toString()</code> function in the interface <code>StringableInterface</code> provides a straightforward, meaningful text representation of an instance. This feature proves especially useful for debugging, as it allows developers to easily inspect the state of an object by simply converting it to a string. With <code>toString()</code>, the internal data of an object can be output as a human-readable string that reveals key details, such as the current log level, its severity designation, or other significant properties. This approach helps developers quickly understand an object\u2019s state without needing to access each property individually, streamlining both the debugging process and log readability.</p> <p>The <code>StringableInterface</code> is straightforward, defining only a <code>toString()</code> function like this.</p> VBAMonologger.Utils.StringableInterface<pre><code>'@Interface\n'@ModuleDescription(\"Denotes the class as having a toString() method.\")\n\n'@Description(\"Give a string representation of instance.\")\nPublic Function toString() As String\nEnd Function\n</code></pre> <p>Within the <code>LogLevel</code> module class, the <code>toString()</code> function is implemented as follows. We have also a proxy method for public exposition.</p> VBAMonologger.Log.LogLevel<pre><code>'@inheritdoc - implements StringableInterface\nPrivate Function StringableInterface_toString() As String\nDim output As String\n    output = \"[VBAMonologger.Log.LogLevel]\" &amp; vbCrLf\n    output = output &amp; \" | currentLogLevel: \" &amp; currentLogLevel &amp; vbCrLf\n    output = output &amp; \" | name: '\" &amp; name() &amp; \"'\" &amp; vbCrLf\n\n    StringableInterface_toString = output\nEnd Function\n\n'@Description(\"Proxy method for public exposition.\")\nPublic Function toString() As String\n    toString = StringableInterface_toString\nEnd Function\n</code></pre>"},{"location":"under-the-hood/log-severity-levels.html#usages","title":"Usages","text":""},{"location":"under-the-hood/log-severity-levels.html#setting-the-current-log-level","title":"Setting the current log level","text":"<p>The public property <code>currentLogLevel</code> defines the active log level within an instance. By default, it is set to <code>LEVEL_DEBUG</code> upon instantiation. However, this level can be modified in a few different ways:</p> <ul> <li>Through the class constructor:   <pre><code>Dim level As VBAMonologger.logLevel\n\nSet level = New VBAMonologger.logLevel\nlevel.construct LEVEL_INFO\n</code></pre></li> <li>By setting the property directly:   <pre><code>Set level = New VBAMonologger.logLevel\nlevel.currentLogLevel = LEVEL_INFO\n</code></pre></li> <li>Or by using the <code>fromName(name As String)</code> method, which accepts a string representation of the level to set the current log level.   <pre><code>Set level = New VBAMonologger.logLevel\nlevel.fromName(\"INFO\")\n</code></pre></li> </ul>"},{"location":"under-the-hood/log-severity-levels.html#comparing-log-levels","title":"Comparing log levels","text":"<p>When working with log levels, it's often necessary to determine their relative importance. For instance, you might want to check if one level is more severe than another, or if a specific level falls within a certain range. Log levels in VBA Monologger are designed to facilitate such comparisons, enabling developers to implement precise logging rules and filters.</p> <p>You can compare two log levels using the <code>includes</code>, <code>isHigherThan</code>, and <code>isLowerThan</code> methods. These methods allow you to check the relationship between the current log level and another.</p> <ul> <li><code>includes(level As LogLevel)</code>: Returns True if the current log level is equal to or higher than the specified level.</li> <li><code>isHigherThan(level As LogLevel)</code>: Returns True if the current log level is strictly higher than the specified level.</li> <li><code>isLowerThan(level As LogLevel)</code>: Returns True if the current log level is strictly lower than the specified level.</li> </ul> <p>These comparisons are useful for filtering log messages based on their severity and ensuring that only relevant logs are processed or displayed.</p> <p><pre><code>Dim level As VBAMonologger.logLevel\nSet level = New logLevel\nlevel.currentLogLevel = LOG_LEVELS.LEVEL_WARNING\n\nDim otherLevel As logLevel\nSet otherLevel = New logLevel\n\n' Compare WARNING with INFO\nDebug.Print \"&gt;&gt;&gt; Compare WARNING with INFO\"\notherLevel.currentLogLevel = LOG_LEVELS.LEVEL_INFO\nDebug.Print \"Is the current level '\" &amp; testLevel.name &amp; \"' is higher than '\" &amp; otherLevel.name &amp; \"'? \"; testLevel.isHigherThan(otherLevel) ' Result: True\nDebug.Print \"Is the current level '\" &amp; testLevel.name &amp; \"' is lower than '\" &amp; otherLevel.name &amp; \"'? \"; testLevel.isLowerThan(otherLevel) ' Result: False\nDebug.Print \"Is the current level '\" &amp; testLevel.name &amp; \"' includes '\" &amp; otherLevel.name &amp; \"'? \"; testLevel.includes(otherLevel) ' Result: False\n\n' Compare WARNING with ALERT\nDebug.Print \"&gt;&gt;&gt; Compare WARNING with ALERT\"\notherLevel.currentLogLevel = LOG_LEVELS.LEVEL_ALERT\nDebug.Print \"Is the current level '\" &amp; testLevel.name &amp; \"' is higher than '\" &amp; otherLevel.name &amp; \"'? \"; testLevel.isHigherThan(otherLevel) ' Result: True\nDebug.Print \"Is the current level '\" &amp; testLevel.name &amp; \"' is lower than '\" &amp; otherLevel.name &amp; \"'? \"; testLevel.isLowerThan(otherLevel) ' Result: False\nDebug.Print \"Is the current level '\" &amp; testLevel.name &amp; \"' includes '\" &amp; otherLevel.name &amp; \"'? \"; testLevel.includes(otherLevel) ' Result: False\n</code></pre> Result<pre><code>&gt;&gt;&gt; Compare WARNING with INFO\nIs the current level 'WARNING' is higher than 'INFO'? True\nIs the current level 'WARNING' is lower than 'INFO'? False\nIs the current level 'WARNING' includes 'INFO'? False\n\n&gt;&gt;&gt; Compare WARNING with ALERT\nIs the current level 'WARNING' is higher than 'ALERT'? False\nIs the current level 'WARNING' is lower than 'ALERT'? True\nIs the current level 'WARNING' includes 'ALERT'? True\n</code></pre></p>"},{"location":"under-the-hood/logger.html","title":"Logger","text":""},{"location":"under-the-hood/logger.html#concept","title":"Concept","text":"<p>The logger is the central component of this library, acting as the primary interface for recording, categorizing, and managing log messages throughout an application. It provides developers with a highly configurable and flexible tool for implementing custom logging logic tailored to their specific needs. By using a logger, applications can systematically capture events and system states, facilitating both real-time monitoring and historical analysis of system behavior.</p> <p>The logger is designed to handle multiple logging levels, directing each log entry to the appropriate handlers (i.e. appropriate destinations) and applying the correct formatting to messages. It also supports the use of various pre-processors, which can enrich log messages with extra contextual information, allowing for complex logging logic while keeping code readable and straightforward.</p> <p>Additionally, the logger standardizes and simplifies the use of logging methods (such as methods: <code>logger.trace</code>, <code>logger.info</code>, ...). It offers a consistent and intuitive approach to logging at different levels of severity, letting developers effortlessly call the appropriate logging level without dealing with the underlying technical details. Each log level can be invoked through a simple, clear method, making logging an integral yet unobtrusive part of the development process.</p> <p>Every logger implements the <code>LoggerInterface</code>, which provides the following methods:</p> <pre><code>Logger.emergency \"A critical failure occurred in the application.\"\nLogger.alert \"Action required: unable to generate the dashboard.\"\nLogger.critical \"System is in an unstable state.\"\nLogger.error \"An error occurred with the user 'DRZCFOS2'.\"\nLogger.warning \"'Beetlejuice' should not be called more than 3 times.\"\nLogger.notice \"Process completed successfully with minor issues.\"\nLogger.info \"User 'UltraVomit' has logged in successfully.\"\nLogger.trace \"Authentication function call for user 'Bob Morane'.\" \n</code></pre>"},{"location":"under-the-hood/pre-processor.html","title":"Pre-processor","text":""},{"location":"under-the-hood/pre-processor.html#concept","title":"Concept","text":"<p>Pre-processor is a powerful feature, allowing for additional metadatas to be added to log entries before they are recorded. This function can be used to enrich log messages with extra metadata that might not be directly part of the log entry itself, but is still relevant for better understanding and tracking. Pre-processors can modify, format, or even generate additional metadata that can be attached to each log message into the <code>extra</code> property.</p> <p>VBA Monologger provides several built-in processors provide specific functionalities that allow you to add additional context or modify the log entry in various ways before it is sent to the handlers.</p> Processor Description <code>ProcessorTags</code> Adds one or more tags to a log entry. <code>ProcessorUID</code> Adds a unique identifier (UID) to each log entry. The generated UID consists of hexadecimal characters, and its size can be configured. <code>ProcessorMemoryUsage</code> Adds the computer's memory usage to each log entry. The system's current memory status is retrieved using the <code>GlobalMemoryStatusEx</code> API in Windows."},{"location":"under-the-hood/pre-processor.html#modeling","title":"Modeling","text":"<p>The interface <code>VBAMonologger.Processor.ProcessorInterface</code> defines the standard behavior for all processor implementations in thisJe logging system. This interface ensures that processors can modify or enhance log records consistently before they are handled by log handlers. </p> <p>By defining a single method, called <code>invoke</code>, it standardizes how log records are pre-processed, enabling traceability, enrichment, or transformation of logging data.</p> <pre><code>classDiagram\n    direction TB\n\n    class ProcessorInterface {\n        +invoke(ByRef LogRecord: VBAMonologger.LogRecordInterface) void\n    }\n\n    ProcessorTags ..|&gt; ProcessorInterface : Implements\n    ProcessorUid ..|&gt; ProcessorInterface : Implements\n    ProcessorMemoryUsage ..|&gt; ProcessorInterface : Implements</code></pre> <p>The <code>invoke</code> method serves as a core mechanism for transforming or enriching log records during the logging process. It operates directly on the <code>LogRecordInterface</code> object passed as a parameter, enabling seamless and efficient modifications to the data before it is forwarded to subsequent components.</p> <p>When invoked, the method performs a specific transformation defined by its implementation. This may include adding new information, such as unique identifiers, additional metadata, or contextual tags, or modifying existing attributes like the message or log level. These changes are applied directly to the original object, ensuring smooth integration within the logging pipeline.</p> <p>This method is crucial for customizing and adapting log records while maintaining a standardized structure for consistency. It does not return a value, as its primary purpose is to directly manipulate the log record data to prepare it for the next stage of processing.</p>"},{"location":"under-the-hood/pre-processor.html#processortags","title":"ProcessorTags","text":"<p>The <code>ProcessorTags</code> class is designed to add contextual tags to log records. By convention, these tags can be stored in the <code>context</code> or <code>extra</code> property of a log record, ensuring that metadata is consistently organized and easily accessible. </p> <p>A log context is more often associated with global or session-related contextual information that can be shared across the application, whereas log extra is a mechanism to add specific, customized information directly to a particular log record.</p> <pre><code>classDiagram\n    direction TB\n\n    class ProcessorTags {\n        -Scripting.Dictionary pTags\n        +TAGS_DESTINATION tagsDestination\n        +construct(Optional paramTags: Scripting.IDictionary, Optional paramTagsDestination: TAGS_DESTINATION): ProcessorInterface\n        +addTags(ByRef newTags: Scripting.Dictionary): ProcessorInterface\n        +setTags(ByRef newTags: Scripting.Dictionary): ProcessorInterface\n        +ProcessorInterface_invoke(ByRef paramLogRecord: VBAMonologger.LogRecordInterface) void\n    }\n\n    class TAGS_DESTINATION {\n        &lt;&lt;enumeration&gt;&gt;\n        LOG_CONTEXT\n        LOG_EXTRA\n    }\n\n    %% Relations\n    ProcessorTags --&gt; TAGS_DESTINATION : Uses\n    ProcessorTags ..|&gt; ProcessorInterface : Implements</code></pre> <p>The class leverages a VBA dictionary to maintain tags as key-value pairs, enabling flexible enrichment of log data. The private <code>pTags</code> dictionary is used to store the tags. It is initialized when the class is created, and can optionally be set with predefined tags through the construct method.</p>"},{"location":"under-the-hood/pre-processor.html#setting-tags","title":"Setting tags","text":"<p>Use the <code>setTags</code> method to replace the existing tags with an entirely new set of key-value pairs, ensuring that the dictionary is cleared before adding the new tags.</p> <pre><code>Dim processorTagger As VBAMonologger.Processor.ProcessorTags\nSet processorTagger = New VBAMonologger.Processor.ProcessorTags\n\nDim initialTags As Scripting.Dictionary\nSet initialTags = New Scripting.Dictionary\ninitialTags.Add \"env\", \"PROD\"\n\n' Sets new tags into pre-processor by overwritting existing tags.\nprocessorTagger.setTags(initialTags)\n\n' References processor into a logger\nDim logger As VBAMonologger.Logger\nSet logger = New VBAMonologger.Logger\nlogger.addProcessor(processorTagger)\n\n' The tag \"env\" is automatically added to every log record.\nlogger.info(\"User logged in succesfully\")\n</code></pre>"},{"location":"under-the-hood/pre-processor.html#adding-a-tag","title":"Adding a tag","text":"<p>Use the addTags method to add new key-value pairs to the existing tag dictionary without overwriting existing entries. This allows for incremental enrichment of tags, enabling you to append additional contextual information to log records as needed, while preserving any previously added tags. This method is useful when you want to enhance the log data with extra details without losing any prior metadata.</p> <pre><code>Dim processorTagger As VBAMonologger.Processor.ProcessorTags\nSet processorTagger = New VBAMonologger.Processor.ProcessorTags\n\nDim initialTags As Scripting.Dictionary\nSet initialTags = New Scripting.Dictionary\ninitialTags.Add \"env\", \"PROD\"\ninitialTags.Add \"app\", \"CRM\"\n\n' Sets initial tags\nprocessorTagger.setTags(initialTags)\n\n' Adds new tags without overwriting\nDim additionalTags As Scripting.Dictionary\nSet additionalTags = New Scripting.Dictionary\nadditionalTags.Add \"userId\", \"20100\"\nadditionalTags.Add \"service\", \"authentification\"\nprocessorTagger.addTags(additionalTags)\n\n' References processor into a logger\nDim logger As VBAMonologger.Logger\nSet logger = New VBAMonologger.Logger\nlogger.addProcessor(processorTagger)\n\n' Tags \"env\", \"app\", \"userId\", and \"service\" will be added to each log record.\nlogger.info(\"User logged in successfully\")\n</code></pre>"},{"location":"under-the-hood/pre-processor.html#processoruid","title":"ProcessorUID","text":"<pre><code>classDiagram\n    direction TB\n\n    class ProcessorUid {\n        -String pUid\n        +construct(length: Integer) ProcessorInterface\n        +InterfaceProcessor_invoke(ByRef paramLogRecord: VBAMonologger.LogRecordInterface) void\n        -pGenerateUid(length: Integer): String\n        -Class_Initialize() void\n    }\n\n    ProcessorUid ..|&gt; ProcessorInterface : Implements\n</code></pre>"},{"location":"blog/archive/2025.html","title":"2025","text":""},{"location":"blog/archive/2024.html","title":"2024","text":""},{"location":"blog/category/blog.html","title":"Blog","text":""}]}